#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- –ë—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞
- CI/CD pipeline –ø—Ä–æ–≤–µ—Ä–æ–∫
- –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import time
import random
import psutil
from typing import Dict

import config
from database import DatabaseManager


class QuickBenchmark:
    def __init__(self):
        self.process = psutil.Process()
        
    async def run_quick_tests(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("‚ö° –ë–´–°–¢–†–´–ô –ë–ï–ù–ß–ú–ê–†–ö pixel-battle")
        print("=" * 40)
        
        results = {}
        
        # 1. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–æ–ª—Å—Ç–∞
        print("üîß –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö–æ–ª—Å—Ç–∞...")
        results['canvas_init'] = await self._test_canvas_initialization()
        
        # 2. –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∏–∫—Å–µ–ª—è–º–∏
        print("üé® –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∏–∫—Å–µ–ª—è–º–∏...")
        results['pixel_ops'] = await self._test_pixel_operations()
        
        # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        print("üìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π...")
        results['active_pixels'] = await self._test_active_pixels_retrieval()
        
        # 4. –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("üóÑÔ∏è  –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        results['database'] = await self._test_database_operations()
        
        # 5. –¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        print("üß† –¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        results['memory'] = self._test_memory_usage()
        
        return results
    
    async def _test_canvas_initialization(self) -> Dict:
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö–æ–ª—Å—Ç–∞"""
        start_time = time.time()
        memory_before = self.process.memory_info().rss
        
        canvas = config.OptimizedCanvas(config.CANVAS_WIDTH, config.CANVAS_HEIGHT)
        
        duration = time.time() - start_time
        memory_after = self.process.memory_info().rss
        memory_used = memory_after - memory_before
        
        return {
            'duration': duration,
            'memory_used': memory_used,
            'status': 'pass' if duration < 0.01 else 'slow'  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
        }
    
    async def _test_pixel_operations(self) -> Dict:
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π"""
        canvas = config.OptimizedCanvas(config.CANVAS_WIDTH, config.CANVAS_HEIGHT)
        num_operations = 1000
        
        start_time = time.time()
        memory_before = self.process.memory_info().rss
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        colors = config.colors if config.colors else ["#FF0000", "#00FF00", "#0000FF"]
        for _ in range(num_operations):
            x = random.randint(0, config.CANVAS_WIDTH - 1)
            y = random.randint(0, config.CANVAS_HEIGHT - 1)
            color = random.choice(colors)
            canvas.set_pixel(x, y, color)
        
        duration = time.time() - start_time
        memory_after = self.process.memory_info().rss
        memory_used = memory_after - memory_before
        ops_per_second = num_operations / duration if duration > 0 else 0
        
        return {
            'duration': duration,
            'memory_used': memory_used,
            'operations_per_second': ops_per_second,
            'operations_count': num_operations,
            'status': 'pass' if ops_per_second > 10000 else 'slow'  # –û–∂–∏–¥–∞–µ–º >10k ops/sec
        }
    
    async def _test_active_pixels_retrieval(self) -> Dict:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π"""
        canvas = config.OptimizedCanvas(config.CANVAS_WIDTH, config.CANVAS_HEIGHT)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ö–æ–ª—Å—Ç –¥–∞–Ω–Ω—ã–º–∏
        colors = config.colors if config.colors else ["#FF0000", "#00FF00", "#0000FF"]
        for _ in range(5000):  # 5k –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
            x = random.randint(0, config.CANVAS_WIDTH - 1)
            y = random.randint(0, config.CANVAS_HEIGHT - 1)
            color = random.choice(colors)
            canvas.set_pixel(x, y, color)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        num_retrievals = 100
        start_time = time.time()
        
        for _ in range(num_retrievals):
            active_pixels = canvas.get_active_pixels()
        
        duration = time.time() - start_time
        retrievals_per_second = num_retrievals / duration if duration > 0 else 0
        
        return {
            'duration': duration,
            'retrievals_per_second': retrievals_per_second,
            'active_pixels_count': len(active_pixels),
            'retrievals_count': num_retrievals,
            'status': 'pass' if retrievals_per_second > 1000 else 'slow'  # –û–∂–∏–¥–∞–µ–º >1k retrievals/sec
        }
    
    async def _test_database_operations(self) -> Dict:
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        db_manager = DatabaseManager(db_path='sqlite+aiosqlite:///quick_test.db')
        
        try:
            await db_manager.init_db()
            
            # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞
            pixels_data = []
            colors = config.colors if config.colors else ["#FF0000", "#00FF00", "#0000FF"]
            
            for i in range(500):  # 500 –ø–∏–∫—Å–µ–ª–µ–π
                pixels_data.append({
                    'x': i % config.CANVAS_WIDTH,
                    'y': (i // config.CANVAS_WIDTH) % config.CANVAS_HEIGHT,
                    'color': colors[i % len(colors)],
                    'last_update': time.time()
                })
            
            start_time = time.time()
            await db_manager.bulk_save_pixels(pixels_data)
            save_duration = time.time() - start_time
            
            # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            start_time = time.time()
            loaded_pixels = await db_manager.load_canvas()
            load_duration = time.time() - start_time
            
            # –û—á–∏—Å—Ç–∫–∞
            import os
            if os.path.exists('quick_test.db'):
                os.remove('quick_test.db')
            
            save_ops_per_second = len(pixels_data) / save_duration if save_duration > 0 else 0
            load_ops_per_second = len(loaded_pixels) / load_duration if load_duration > 0 else 0
            
            return {
                'save_duration': save_duration,
                'load_duration': load_duration,
                'save_ops_per_second': save_ops_per_second,
                'load_ops_per_second': load_ops_per_second,
                'pixels_saved': len(pixels_data),
                'pixels_loaded': len(loaded_pixels),
                'status': 'pass' if save_ops_per_second > 100 and load_ops_per_second > 1000 else 'slow'
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }
    
    def _test_memory_usage(self) -> Dict:
        """–¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        memory_before = self.process.memory_info().rss
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
        canvas = config.OptimizedCanvas(config.CANVAS_WIDTH, config.CANVAS_HEIGHT)
        colors = config.colors if config.colors else ["#FF0000", "#00FF00", "#0000FF"]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º 10k –ø–∏–∫—Å–µ–ª–µ–π
        pixel_count = 10000
        for i in range(pixel_count):
            x = i % config.CANVAS_WIDTH
            y = (i // config.CANVAS_WIDTH) % config.CANVAS_HEIGHT
            color = colors[i % len(colors)]
            canvas.set_pixel(x, y, color)
        
        memory_after = self.process.memory_info().rss
        memory_used = memory_after - memory_before
        memory_per_pixel = memory_used / pixel_count if pixel_count > 0 else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ–ª—Å—Ç–∞
        memory_stats = canvas.get_memory_usage()
        
        return {
            'memory_used': memory_used,
            'memory_per_pixel': memory_per_pixel,
            'pixels_stored': canvas.get_pixels_count(),
            'memory_efficiency': memory_stats.get('memory_efficiency', 0),
            'cache_hits': memory_stats.get('cache_hits', 0),
            'cache_misses': memory_stats.get('cache_misses', 0),
            'status': 'pass' if memory_per_pixel < 1000 else 'high_memory'  # < 1KB per pixel
        }
    
    def print_results(self, results: Dict):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ì–û –ë–ï–ù–ß–ú–ê–†–ö–ê")
        print("="*50)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_passed = all(
            result.get('status', 'unknown') in ['pass', 'ok'] 
            for result in results.values() 
            if isinstance(result, dict)
        )
        
        status_icon = "‚úÖ" if all_passed else "‚ö†Ô∏è"
        print(f"\n{status_icon} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–ü–†–û–®–ï–õ' if all_passed else '–ï–°–¢–¨ –ó–ê–ú–ï–î–õ–ï–ù–ò–Ø'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–æ–ª—Å—Ç–∞:")
        canvas_init = results.get('canvas_init', {})
        status = "‚úÖ" if canvas_init.get('status') == 'pass' else "‚ö†Ô∏è"
        print(f"  {status} –í—Ä–µ–º—è: {canvas_init.get('duration', 0)*1000:.2f}ms")
        print(f"     –ü–∞–º—è—Ç—å: {canvas_init.get('memory_used', 0)/1024:.1f}KB")
        
        print(f"\nüé® –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∏–∫—Å–µ–ª—è–º–∏:")
        pixel_ops = results.get('pixel_ops', {})
        status = "‚úÖ" if pixel_ops.get('status') == 'pass' else "‚ö†Ô∏è"
        print(f"  {status} –°–∫–æ—Ä–æ—Å—Ç—å: {pixel_ops.get('operations_per_second', 0):.0f} ops/sec")
        print(f"     –í—Ä–µ–º—è: {pixel_ops.get('duration', 0)*1000:.1f}ms –¥–ª—è {pixel_ops.get('operations_count', 0)} –æ–ø–µ—Ä–∞—Ü–∏–π")
        
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π:")
        active_pixels = results.get('active_pixels', {})
        status = "‚úÖ" if active_pixels.get('status') == 'pass' else "‚ö†Ô∏è"
        print(f"  {status} –°–∫–æ—Ä–æ—Å—Ç—å: {active_pixels.get('retrievals_per_second', 0):.0f} retrievals/sec")
        print(f"     –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {active_pixels.get('active_pixels_count', 0)}")
        
        print(f"\nüóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
        database = results.get('database', {})
        if database.get('status') == 'error':
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {database.get('error', 'Unknown error')}")
        else:
            status = "‚úÖ" if database.get('status') == 'pass' else "‚ö†Ô∏è"
            print(f"  {status} –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {database.get('save_ops_per_second', 0):.0f} ops/sec")
            print(f"     –ó–∞–≥—Ä—É–∑–∫–∞: {database.get('load_ops_per_second', 0):.0f} ops/sec")
        
        print(f"\nüß† –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
        memory = results.get('memory', {})
        status = "‚úÖ" if memory.get('status') == 'pass' else "‚ö†Ô∏è"
        print(f"  {status} –ù–∞ –ø–∏–∫—Å–µ–ª—å: {memory.get('memory_per_pixel', 0):.0f} –±–∞–π—Ç")
        print(f"     –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {memory.get('memory_efficiency', 0):.1f}%")
        print(f"     Cache hits/misses: {memory.get('cache_hits', 0)}/{memory.get('cache_misses', 0)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –ë–´–°–¢–†–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not all_passed:
            print("  ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–º–µ–¥–ª–µ–Ω–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            if canvas_init.get('status') != 'pass':
                print("     ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–æ–ª—Å—Ç–∞ –º–µ–¥–ª–µ–Ω–Ω–∞—è")
            if pixel_ops.get('status') != 'pass':
                print("     ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∏–∫—Å–µ–ª—è–º–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ")
            if active_pixels.get('status') != 'pass':
                print("     ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –º–µ–¥–ª–µ–Ω–Ω–æ–µ")
            if database.get('status') not in ['pass', 'ok']:
                print("     ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            if memory.get('status') != 'pass':
                print("     ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        else:
            print("  ‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ!")
            print("  üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")


async def main():
    """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    benchmark = QuickBenchmark()
    
    start_time = time.time()
    results = await benchmark.run_quick_tests()
    total_time = time.time() - start_time
    
    benchmark.print_results(results)
    
    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    asyncio.run(main())
