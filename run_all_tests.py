#!/usr/bin/env python3
"""
–ú–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ pixel-battle

–ó–∞–ø—É—Å–∫–∞–µ—Ç:
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã WebSocket  
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
"""

import asyncio
import time
import json
import sys
from datetime import datetime
from typing import Dict, List

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from test_performance import PerformanceTester
from test_websocket_load import WebSocketLoadTester

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
import config


class TestRunner:
    def __init__(self):
        self.start_time = None
        self.all_results = []
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò pixel-battle")
        print("=" * 60)
        print(f"üïê –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        self.start_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await self._initialize_test_environment()
        
        # 1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\nüîß –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        performance_tester = PerformanceTester()
        performance_results = await performance_tester.run_all_tests()
        self.all_results.extend([("Performance", r) for r in performance_results])
        
        # 2. –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã WebSocket
        print("\nüîå –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ WebSocket...")
        websocket_tester = WebSocketLoadTester()
        websocket_results = await websocket_tester.run_load_tests()
        self.all_results.extend([("WebSocket Load", r) for r in websocket_results])
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self._generate_comprehensive_report()
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
        await self._save_results_to_file()
        
        total_time = time.time() - self.start_time
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥!")
        
        return self.all_results
    
    async def _initialize_test_environment(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ–ª—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        if not hasattr(config, 'canvas') or config.canvas is None:
            config.canvas = config.OptimizedCanvas(config.CANVAS_WIDTH, config.CANVAS_HEIGHT)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
        print("üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        for i in range(1000):
            x = i % config.CANVAS_WIDTH
            y = (i // config.CANVAS_WIDTH) % config.CANVAS_HEIGHT
            color = config.colors[i % len(config.colors)] if config.colors else "#FF0000"
            config.canvas.set_pixel(x, y, color)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {config.canvas.get_pixels_count()}")
    
    def _generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
        print("\n" + "="*80)
        print("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_stats = {}
        
        for test_type, result in self.all_results:
            if test_type not in categories_stats:
                categories_stats[test_type] = {
                    'total_tests': 0,
                    'total_duration': 0,
                    'operations_per_second': [],
                    'memory_usage': []
                }
            
            stats = categories_stats[test_type]
            stats['total_tests'] += 1
            
            if hasattr(result, 'duration'):
                stats['total_duration'] += result.duration
            
            if hasattr(result, 'operations_per_second') and result.operations_per_second > 0:
                stats['operations_per_second'].append(result.operations_per_second)
                
            if hasattr(result, 'memory_used') and result.memory_used > 0:
                stats['memory_usage'].append(result.memory_used)
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, stats in categories_stats.items():
            print(f"\nüîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            print("-" * 40)
            print(f"  üìã –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}")
            print(f"  ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration']:.3f}s")
            
            if stats['operations_per_second']:
                avg_ops = sum(stats['operations_per_second']) / len(stats['operations_per_second'])
                max_ops = max(stats['operations_per_second'])
                print(f"  üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —Å—Ä–µ–¥–Ω—è—è {avg_ops:.1f} ops/s, –º–∞–∫—Å {max_ops:.1f} ops/s")
            
            if stats['memory_usage']:
                total_memory = sum(stats['memory_usage'])
                avg_memory = total_memory / len(stats['memory_usage'])
                print(f"  üß† –ü–∞–º—è—Ç—å: –æ–±—â–∞—è {total_memory/1024:.1f}KB, —Å—Ä–µ–¥–Ω—è—è {avg_memory/1024:.1f}KB")
        
        # –ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self._print_key_achievements()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._print_recommendations()
    
    def _print_key_achievements(self):
        """–í—ã–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\nüèÜ –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print("-" * 40)
        
        # –ü–æ–∏—Å–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        optimized_results = []
        legacy_results = []
        
        for test_type, result in self.all_results:
            if hasattr(result, 'name'):
                if 'Optimized' in result.name or 'OptimizedCanvas' in result.name:
                    optimized_results.append(result)
                elif 'Legacy' in result.name:
                    legacy_results.append(result)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if optimized_results and legacy_results:
            print("  ‚ö° –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            
            for opt_result in optimized_results:
                for leg_result in legacy_results:
                    if self._are_comparable_tests(opt_result.name, leg_result.name):
                        if hasattr(opt_result, 'duration') and hasattr(leg_result, 'duration'):
                            if opt_result.duration > 0:
                                speedup = leg_result.duration / opt_result.duration
                                print(f"    ‚Ä¢ {self._extract_test_name(opt_result.name)}: {speedup:.1f}x –±—ã—Å—Ç—Ä–µ–µ")
                        
                        if hasattr(opt_result, 'memory_used') and hasattr(leg_result, 'memory_used'):
                            if opt_result.memory_used > 0:
                                memory_improvement = leg_result.memory_used / opt_result.memory_used
                                print(f"    ‚Ä¢ {self._extract_test_name(opt_result.name)}: {memory_improvement:.1f}x –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏")
        
        # –î—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        print("  üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
        
        # –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        best_throughput = 0
        best_throughput_test = None
        
        for test_type, result in self.all_results:
            if hasattr(result, 'operations_per_second') and result.operations_per_second > best_throughput:
                best_throughput = result.operations_per_second
                best_throughput_test = result.name if hasattr(result, 'name') else f"{test_type} test"
        
        if best_throughput_test:
            print(f"    ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {best_throughput:.1f} ops/s ({best_throughput_test})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∏–∫—Å–µ–ª—è–º
        if hasattr(config.canvas, 'get_pixels_count'):
            active_pixels = config.canvas.get_pixels_count()
            total_possible = config.CANVAS_WIDTH * config.CANVAS_HEIGHT
            efficiency = (active_pixels / total_possible) * 100
            print(f"    ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏: {100 - efficiency:.1f}% —ç–∫–æ–Ω–æ–º–∏–∏ (—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ {active_pixels} –∏–∑ {total_possible} –ø–∏–∫—Å–µ–ª–µ–π)")
    
    def _print_recommendations(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ê–õ–¨–ù–ï–ô–®–ï–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        slow_tests = []
        memory_hungry_tests = []
        
        for test_type, result in self.all_results:
            if hasattr(result, 'duration') and result.duration > 1.0:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã > 1 —Å–µ–∫—É–Ω–¥—ã
                slow_tests.append((test_type, result))
            
            if hasattr(result, 'memory_used') and result.memory_used > 10 * 1024 * 1024:  # > 10MB
                memory_hungry_tests.append((test_type, result))
        
        if slow_tests:
            print("  üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
            for test_type, result in slow_tests[:3]:  # –¢–æ–ø-3 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö
                name = result.name if hasattr(result, 'name') else f"{test_type} test"
                print(f"    ‚Ä¢ {name}: {result.duration:.3f}s")
        
        if memory_hungry_tests:
            print("  üß† –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏:")
            for test_type, result in memory_hungry_tests[:3]:  # –¢–æ–ø-3 –ø–∞–º—è—Ç–∏–µ–º–∫–∏—Ö
                name = result.name if hasattr(result, 'name') else f"{test_type} test"
                print(f"    ‚Ä¢ {name}: {result.memory_used/1024/1024:.1f}MB")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("  üéØ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("    ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏")
        print("    ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–ª—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö")
        print("    ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        print("    ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ >1000 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    def _are_comparable_tests(self, name1: str, name2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –¥–≤–∞ —Ç–µ—Å—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        base1 = name1.replace("OptimizedCanvas - ", "").replace("Optimized ", "").replace("Legacy ", "").replace("LegacyCanvas - ", "")
        base2 = name2.replace("OptimizedCanvas - ", "").replace("Optimized ", "").replace("Legacy ", "").replace("LegacyCanvas - ", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
        return base1.lower() in base2.lower() or base2.lower() in base1.lower()
    
    def _extract_test_name(self, full_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
        return full_name.replace("OptimizedCanvas - ", "").replace("Optimized ", "").split(" (")[0]
    
    async def _save_results_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"performance_report_{timestamp}.json"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "total_duration": time.time() - self.start_time,
            "system_info": {
                "canvas_size": f"{config.CANVAS_WIDTH}x{config.CANVAS_HEIGHT}",
                "cooldown_time": config.COOLDOWN_TIME,
                "active_pixels": config.canvas.get_pixels_count() if hasattr(config.canvas, 'get_pixels_count') else 0
            },
            "tests": []
        }
        
        for test_type, result in self.all_results:
            test_data = {
                "category": test_type,
                "name": getattr(result, 'name', 'Unknown'),
                "duration": getattr(result, 'duration', 0),
                "memory_used": getattr(result, 'memory_used', 0),
                "operations_per_second": getattr(result, 'operations_per_second', 0)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(result, 'additional_info'):
                test_data["additional_info"] = result.additional_info
            
            # –î–ª—è WebSocket —Ç–µ—Å—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
            if hasattr(result, 'total_clients'):
                test_data.update({
                    "total_clients": result.total_clients,
                    "successful_connections": result.successful_connections,
                    "total_messages_sent": result.total_messages_sent,
                    "total_messages_received": result.total_messages_received,
                    "average_response_time": result.average_response_time
                })
            
            report_data["tests"].append(test_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        runner = TestRunner()
        results = await runner.run_all_tests()
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {len(results)} —Ç–µ—Å—Ç–æ–≤")
        
        return 0
        
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))