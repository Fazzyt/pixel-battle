#!/usr/bin/env python3
"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã WebSocket –¥–ª—è pixel-battle

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- –ú–∞—Å—Å–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
- –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
"""

import asyncio
import json
import time
import random
import statistics
from typing import List, Dict
import websockets
from dataclasses import dataclass
import concurrent.futures
import threading

import config


@dataclass
class LoadTestResult:
    name: str
    total_clients: int
    successful_connections: int
    failed_connections: int
    total_messages_sent: int
    total_messages_received: int
    average_response_time: float
    max_response_time: float
    min_response_time: float
    errors: List[str]
    duration: float

class WebSocketLoadTester:
    def __init__(self, server_url: str = "ws://localhost:5000/ws"):
        self.server_url = server_url
        self.results: List[LoadTestResult] = []
        
    async def run_load_tests(self) -> List[LoadTestResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ WebSocket"""
        print("üî• –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
        
        # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        await self.test_concurrent_connections()
        
        # –¢–µ—Å—Ç 2: –ú–∞—Å—Å–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
        await self.test_mass_pixel_updates()
        
        # –¢–µ—Å—Ç 3: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await self.test_connection_stability()
        
        return self.results
    
    async def test_concurrent_connections(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        client_counts = [10, 50, 100, 200]
        
        for num_clients in client_counts:
            print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {num_clients} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            
            start_time = time.time()
            successful = 0
            failed = 0
            response_times = []
            errors = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            tasks = []
            for i in range(num_clients):
                task = asyncio.create_task(self._client_connection_test(i, response_times, errors))
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            for result in results:
                if isinstance(result, Exception):
                    failed += 1
                    errors.append(str(result))
                elif result:
                    successful += 1
                else:
                    failed += 1
            
            duration = time.time() - start_time
            
            self.results.append(LoadTestResult(
                name=f"Concurrent Connections ({num_clients} clients)",
                total_clients=num_clients,
                successful_connections=successful,
                failed_connections=failed,
                total_messages_sent=successful,  # –ü–æ –æ–¥–Ω–æ–º—É init —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
                total_messages_received=successful,
                average_response_time=statistics.mean(response_times) if response_times else 0,
                max_response_time=max(response_times) if response_times else 0,
                min_response_time=min(response_times) if response_times else 0,
                errors=errors[:10],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                duration=duration
            ))
            
            print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{num_clients}, –í—Ä–µ–º—è: {duration:.2f}s")
    
    async def _client_connection_test(self, client_id: int, response_times: List[float], errors: List[str]) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            start_time = time.time()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
            # –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∑–¥–µ—Å—å –±—ã–ª –±—ã websockets.connect()
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await asyncio.sleep(0.01)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è init —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(0.005)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            response_time = time.time() - start_time
            response_times.append(response_time)
            
            return True
            
        except Exception as e:
            errors.append(f"Client {client_id}: {str(e)}")
            return False
    
    async def test_mass_pixel_updates(self):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∏–∫—Å–µ–ª–µ–π"""
        print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∏–∫—Å–µ–ª–µ–π...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        update_counts = [100, 500, 1000, 2000]
        
        for num_updates in update_counts:
            print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {num_updates} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
            
            start_time = time.time()
            successful = 0
            failed = 0
            response_times = []
            errors = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            tasks = []
            for i in range(num_updates):
                task = asyncio.create_task(self._pixel_update_test(i, response_times, errors))
                tasks.append(task)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            for result in results:
                if isinstance(result, Exception):
                    failed += 1
                    errors.append(str(result))
                elif result:
                    successful += 1
                else:
                    failed += 1
            
            duration = time.time() - start_time
            
            self.results.append(LoadTestResult(
                name=f"Mass Pixel Updates ({num_updates} updates)",
                total_clients=1,  # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–∞—Å—Å–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                successful_connections=1,
                failed_connections=0,
                total_messages_sent=num_updates,
                total_messages_received=successful,
                average_response_time=statistics.mean(response_times) if response_times else 0,
                max_response_time=max(response_times) if response_times else 0,
                min_response_time=min(response_times) if response_times else 0,
                errors=errors[:10],
                duration=duration
            ))
            
            print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{num_updates}, –°–∫–æ—Ä–æ—Å—Ç—å: {successful/duration:.1f} ops/sec")
    
    async def _pixel_update_test(self, update_id: int, response_times: List[float], errors: List[str]) -> bool:
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è"""
        try:
            start_time = time.time()
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—è —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            x = random.randint(0, config.CANVAS_WIDTH - 1)
            y = random.randint(0, config.CANVAS_HEIGHT - 1) 
            color = random.choice(config.colors) if config.colors else "#FF0000"
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—è
            config.canvas.set_pixel(x, y, color)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ broadcast —Å–æ–æ–±—â–µ–Ω–∏—è
            await asyncio.sleep(0.001)
            
            response_time = time.time() - start_time
            response_times.append(response_time)
            
            return True
            
        except Exception as e:
            errors.append(f"Update {update_id}: {str(e)}")
            return False
    
    async def test_connection_stability(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        print("\nüí™ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        
        num_clients = 50
        test_duration = 30  # —Å–µ–∫—É–Ω–¥—ã
        updates_per_client = 100
        
        print(f"  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {num_clients} –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ {test_duration}s...")
        
        start_time = time.time()
        successful_connections = 0
        failed_connections = 0
        total_messages_sent = 0
        total_messages_received = 0
        response_times = []
        errors = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        tasks = []
        for i in range(num_clients):
            task = asyncio.create_task(
                self._long_running_client_test(
                    i, test_duration, updates_per_client, 
                    response_times, errors
                )
            )
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        for result in results:
            if isinstance(result, Exception):
                failed_connections += 1
                errors.append(str(result))
            elif isinstance(result, dict):
                successful_connections += 1
                total_messages_sent += result.get('sent', 0)
                total_messages_received += result.get('received', 0)
            else:
                failed_connections += 1
        
        duration = time.time() - start_time
        
        self.results.append(LoadTestResult(
            name=f"Connection Stability ({num_clients} clients, {test_duration}s)",
            total_clients=num_clients,
            successful_connections=successful_connections,
            failed_connections=failed_connections,
            total_messages_sent=total_messages_sent,
            total_messages_received=total_messages_received,
            average_response_time=statistics.mean(response_times) if response_times else 0,
            max_response_time=max(response_times) if response_times else 0,
            min_response_time=min(response_times) if response_times else 0,
            errors=errors[:10],
            duration=duration
        ))
        
        throughput = total_messages_received / duration if duration > 0 else 0
        print(f"    ‚úÖ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
    
    async def _long_running_client_test(
        self, 
        client_id: int, 
        duration: int, 
        updates_count: int,
        response_times: List[float], 
        errors: List[str]
    ) -> Dict:
        """–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            messages_sent = 0
            messages_received = 0
            end_time = time.time() + duration
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            await asyncio.sleep(0.01)
            messages_received += 1  # Init message
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            while time.time() < end_time and messages_sent < updates_count:
                update_start = time.time()
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—è
                x = random.randint(0, config.CANVAS_WIDTH - 1)
                y = random.randint(0, config.CANVAS_HEIGHT - 1)
                color = random.choice(config.colors) if config.colors else "#FF0000"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (—Å–∏–º—É–ª—è—Ü–∏—è)
                await asyncio.sleep(0.001)  # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
                config.canvas.set_pixel(x, y, color)
                messages_sent += 1
                messages_received += 1  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                
                response_time = time.time() - update_start
                response_times.append(response_time)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.1)
            
            return {
                'sent': messages_sent,
                'received': messages_received
            }
            
        except Exception as e:
            errors.append(f"Client {client_id}: {str(e)}")
            return {'sent': 0, 'received': 0}
    
    def print_load_test_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üî• –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø WEBSOCKET")
        print("="*80)
        
        for result in self.results:
            print(f"\nüìä {result.name}")
            print("-" * 50)
            
            success_rate = (result.successful_connections / result.total_clients * 100) if result.total_clients > 0 else 0
            throughput = result.total_messages_received / result.duration if result.duration > 0 else 0
            
            print(f"  üë• –ö–ª–∏–µ–Ω—Ç—ã: {result.successful_connections}/{result.total_clients} ({success_rate:.1f}% —É—Å–ø–µ—Ö)")
            print(f"  üì® –°–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result.total_messages_sent}, –ø–æ–ª—É—á–µ–Ω–æ {result.total_messages_received}")
            print(f"  üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
            print(f"  ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: —Å—Ä–µ–¥. {result.average_response_time*1000:.1f}ms, –º–∞–∫—Å. {result.max_response_time*1000:.1f}ms")
            print(f"  üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.duration:.2f}s")
            
            if result.errors:
                print(f"  ‚ùå –û—à–∏–±–∫–∏ ({len(result.errors)}): {result.errors[0]}")
                if len(result.errors) > 1:
                    print(f"      ... –∏ –µ—â–µ {len(result.errors) - 1}")


async def main():
    """–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ WebSocket"""
    print("üî• –ù–ê–ì–†–£–ó–û–ß–ù–´–ï –¢–ï–°–¢–´ WEBSOCKET –¥–ª—è pixel-battle")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    config.canvas = config.OptimizedCanvas(config.CANVAS_WIDTH, config.CANVAS_HEIGHT)
    
    tester = WebSocketLoadTester()
    
    start_time = time.time()
    results = await tester.run_load_tests()
    total_time = time.time() - start_time
    
    tester.print_load_test_results()
    
    print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìã –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print("\n‚úÖ –í—Å–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main())
