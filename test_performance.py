#!/usr/bin/env python3
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è pixel-battle

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
- OptimizedCanvas vs —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥
- –ë–∞—Ç—á–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ë–î
- WebSocket –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
"""

import asyncio
import time
import psutil
import json
import random
import statistics
from typing import List, Dict, Tuple
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor
import threading
import websockets
import urllib.parse

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
import config
from database import DatabaseManager, PixelModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

@dataclass
class BenchmarkResult:
    name: str
    duration: float
    memory_used: int  # bytes
    operations_per_second: float
    additional_info: Dict = None

class LegacyCanvas:
    """–°—Ç–∞—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    def __init__(self, width: int, height: int):
        self.width = width
        self.height = height
        self.default_color = "#FFFFFF"
        # –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ - –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
        self.canvas = [[{"color": self.default_color, "last_update": 0} 
                       for _ in range(width)] for _ in range(height)]
    
    def set_pixel(self, x: int, y: int, color: str, last_update: float = None):
        if 0 <= x < self.width and 0 <= y < self.height:
            self.canvas[y][x] = {
                "color": color, 
                "last_update": last_update or time.time()
            }
            
    def get_active_pixels_old_way(self):
        """–°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π - –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–æ—Ä"""
        active_pixels = []
        for y in range(self.height):
            for x in range(self.width):
                if self.canvas[y][x]['color'] != self.default_color:
                    active_pixels.append({
                        'x': x,
                        'y': y,
                        'color': self.canvas[y][x]['color']
                    })
        return active_pixels

class PerformanceTester:
    def __init__(self):
        self.results: List[BenchmarkResult] = []
        self.process = psutil.Process()
        
    def measure_memory(self) -> int:
        """–ò–∑–º–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        return self.process.memory_info().rss
        
    async def run_all_tests(self) -> List[BenchmarkResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –¢–µ—Å—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ö–æ–ª—Å—Ç–∞
        await self.test_canvas_performance()
        
        # –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.test_database_performance()
        
        # –¢–µ—Å—Ç—ã WebSocket
        await self.test_websocket_performance()
        
        # –¢–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏
        await self.test_memory_usage()
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_comparative_benchmarks()
        
        return self.results
    
    async def test_canvas_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ö–æ–ª—Å—Ç–∞"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OptimizedCanvas vs Legacy...")
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–∫—Å–µ–ª–µ–π
        await self._test_canvas_pixel_operations()
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        await self._test_active_pixels_retrieval()
        
        # –¢–µ—Å—Ç 3: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        await self._test_bulk_operations()

    async def _test_canvas_pixel_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∏–∫—Å–µ–ª—è–º–∏"""
        num_operations = 10000
        
        # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ OptimizedCanvas
        memory_before = self.measure_memory()
        start_time = time.time()
        
        optimized_canvas = config.OptimizedCanvas(2000, 600)
        for i in range(num_operations):
            x = random.randint(0, 1999)
            y = random.randint(0, 599)
            color = random.choice(config.colors) if config.colors else "#FF0000"
            optimized_canvas.set_pixel(x, y, color)
        
        end_time = time.time()
        memory_after = self.measure_memory()
        
        optimized_duration = end_time - start_time
        optimized_memory = memory_after - memory_before
        
        self.results.append(BenchmarkResult(
            name="OptimizedCanvas - Pixel Operations",
            duration=optimized_duration,
            memory_used=optimized_memory,
            operations_per_second=num_operations / optimized_duration,
            additional_info={"num_operations": num_operations}
        ))
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ LegacyCanvas
        memory_before = self.measure_memory()
        start_time = time.time()
        
        legacy_canvas = LegacyCanvas(2000, 600)
        for i in range(num_operations):
            x = random.randint(0, 1999)
            y = random.randint(0, 599)
            color = random.choice(config.colors) if config.colors else "#FF0000"
            legacy_canvas.set_pixel(x, y, color)
        
        end_time = time.time()
        memory_after = self.measure_memory()
        
        legacy_duration = end_time - start_time
        legacy_memory = memory_after - memory_before
        
        self.results.append(BenchmarkResult(
            name="LegacyCanvas - Pixel Operations",
            duration=legacy_duration,
            memory_used=legacy_memory,
            operations_per_second=num_operations / legacy_duration,
            additional_info={"num_operations": num_operations}
        ))
        
        print(f"‚úÖ Pixel Operations: Optimized {optimized_duration:.3f}s vs Legacy {legacy_duration:.3f}s")
        print(f"   Memory: Optimized {optimized_memory/1024:.1f}KB vs Legacy {legacy_memory/1024:.1f}KB")

    async def _test_active_pixels_retrieval(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        num_pixels = 5000
        
        optimized_canvas = config.OptimizedCanvas(2000, 600)
        legacy_canvas = LegacyCanvas(2000, 600)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±–∞ —Ö–æ–ª—Å—Ç–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        pixels_data = []
        for _ in range(num_pixels):
            x = random.randint(0, 1999)
            y = random.randint(0, 599)
            color = random.choice(config.colors) if config.colors else "#FF0000"
            pixels_data.append((x, y, color))
            
        for x, y, color in pixels_data:
            optimized_canvas.set_pixel(x, y, color)
            legacy_canvas.set_pixel(x, y, color)
        
        # –¢–µ—Å—Ç OptimizedCanvas
        num_retrievals = 100
        start_time = time.time()
        
        for _ in range(num_retrievals):
            active_pixels = optimized_canvas.get_active_pixels()
            
        optimized_duration = time.time() - start_time
        
        # –¢–µ—Å—Ç LegacyCanvas
        start_time = time.time()
        
        for _ in range(num_retrievals):
            active_pixels = legacy_canvas.get_active_pixels_old_way()
            
        legacy_duration = time.time() - start_time
        
        self.results.append(BenchmarkResult(
            name="OptimizedCanvas - Active Pixels Retrieval",
            duration=optimized_duration,
            memory_used=0,
            operations_per_second=num_retrievals / optimized_duration,
            additional_info={"retrievals": num_retrievals, "active_pixels": len(active_pixels)}
        ))
        
        self.results.append(BenchmarkResult(
            name="LegacyCanvas - Active Pixels Retrieval",
            duration=legacy_duration,
            memory_used=0,
            operations_per_second=num_retrievals / legacy_duration,
            additional_info={"retrievals": num_retrievals, "active_pixels": len(active_pixels)}
        ))
        
        speedup = legacy_duration / optimized_duration if optimized_duration > 0 else float('inf')
        print(f"‚úÖ Active Pixels Retrieval: {speedup:.1f}x speedup")

    async def _test_bulk_operations(self):
        """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("‚ö° Testing bulk operations...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        bulk_data = []
        for _ in range(50000):
            bulk_data.append({
                'x': random.randint(0, 1999),
                'y': random.randint(0, 599),
                'color': random.choice(config.colors) if config.colors else "#FF0000",
                'last_update': time.time()
            })
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        memory_before = self.measure_memory()
        start_time = time.time()
        
        optimized_canvas = config.OptimizedCanvas(2000, 600)
        optimized_canvas.bulk_load_pixels(bulk_data)
        
        duration = time.time() - start_time
        memory_after = self.measure_memory()
        
        self.results.append(BenchmarkResult(
            name="OptimizedCanvas - Bulk Load",
            duration=duration,
            memory_used=memory_after - memory_before,
            operations_per_second=len(bulk_data) / duration,
            additional_info={"pixels_loaded": len(bulk_data)}
        ))
        
        print(f"‚úÖ Bulk Load: {len(bulk_data)} pixels in {duration:.3f}s")

    async def test_database_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î...")
        
        db_manager = DatabaseManager(db_path='sqlite+aiosqlite:///test_performance.db')
        await db_manager.init_db()
        
        # –¢–µ—Å—Ç 1: –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è vs –±–∞—Ç—á–∏
        await self._test_single_vs_batch_saves(db_manager)
        
        # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        await self._test_bulk_load_performance(db_manager)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        import os
        if os.path.exists('test_performance.db'):
            os.remove('test_performance.db')

    async def _test_single_vs_batch_saves(self, db_manager):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏ –±–∞—Ç—á–µ–π"""
        num_pixels = 1000
        pixels_data = []
        
        for _ in range(num_pixels):
            pixels_data.append({
                'x': random.randint(0, 1999),
                'y': random.randint(0, 599),
                'color': random.choice(config.colors) if config.colors else "#FF0000",
                'last_update': time.time()
            })
        
        # –¢–µ—Å—Ç –±–∞—Ç—á–µ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        start_time = time.time()
        await db_manager.bulk_save_pixels(pixels_data)
        batch_duration = time.time() - start_time
        
        self.results.append(BenchmarkResult(
            name="Database - Batch Save",
            duration=batch_duration,
            memory_used=0,
            operations_per_second=num_pixels / batch_duration,
            additional_info={"pixels_saved": num_pixels}
        ))
        
        print(f"‚úÖ Batch Save: {num_pixels} pixels in {batch_duration:.3f}s")

    async def _test_bulk_load_performance(self, db_manager):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        start_time = time.time()
        loaded_pixels = await db_manager.load_canvas()
        load_duration = time.time() - start_time
        
        self.results.append(BenchmarkResult(
            name="Database - Load Canvas",
            duration=load_duration,
            memory_used=0,
            operations_per_second=len(loaded_pixels) / load_duration if load_duration > 0 else 0,
            additional_info={"pixels_loaded": len(loaded_pixels)}
        ))
        
        print(f"‚úÖ Canvas Load: {len(loaded_pixels)} pixels in {load_duration:.3f}s")

    async def test_websocket_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        await self._test_connection_simulation()

    async def _test_connection_simulation(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        canvas = config.OptimizedCanvas(2000, 600)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ö–æ–ª—Å—Ç –¥–∞–Ω–Ω—ã–º–∏
        for _ in range(10000):
            x = random.randint(0, 1999)
            y = random.randint(0, 599)
            color = random.choice(config.colors) if config.colors else "#FF0000"
            canvas.set_pixel(x, y, color)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        num_clients = 100
        start_time = time.time()
        
        for _ in range(num_clients):
            # –≠—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            active_pixels = canvas.get_active_pixels()
            
        duration = time.time() - start_time
        
        self.results.append(BenchmarkResult(
            name="WebSocket - Client Initialization Simulation",
            duration=duration,
            memory_used=0,
            operations_per_second=num_clients / duration,
            additional_info={"clients_simulated": num_clients, "active_pixels": len(active_pixels)}
        ))
        
        print(f"‚úÖ Client Init Simulation: {num_clients} clients in {duration:.3f}s")

    async def test_memory_usage(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        await self._test_memory_scaling()

    async def _test_memory_scaling(self):
        """–¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        pixel_counts = [1000, 5000, 10000, 50000]
        
        for pixel_count in pixel_counts:
            memory_before = self.measure_memory()
            
            # OptimizedCanvas
            optimized_canvas = config.OptimizedCanvas(2000, 600)
            for _ in range(pixel_count):
                x = random.randint(0, 1999)
                y = random.randint(0, 599)
                color = random.choice(config.colors) if config.colors else "#FF0000"
                optimized_canvas.set_pixel(x, y, color)
            
            memory_after_optimized = self.measure_memory()
            optimized_memory = memory_after_optimized - memory_before
            
            # LegacyCanvas –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤)
            if pixel_count <= 10000:
                memory_before = self.measure_memory()
                legacy_canvas = LegacyCanvas(2000, 600)
                for _ in range(pixel_count):
                    x = random.randint(0, 1999)
                    y = random.randint(0, 599)
                    color = random.choice(config.colors) if config.colors else "#FF0000"
                    legacy_canvas.set_pixel(x, y, color)
                
                memory_after_legacy = self.measure_memory()
                legacy_memory = memory_after_legacy - memory_before
                
                self.results.append(BenchmarkResult(
                    name=f"Memory Usage - Legacy ({pixel_count} pixels)",
                    duration=0,
                    memory_used=legacy_memory,
                    operations_per_second=0,
                    additional_info={"pixel_count": pixel_count}
                ))
            
            self.results.append(BenchmarkResult(
                name=f"Memory Usage - Optimized ({pixel_count} pixels)",
                duration=0,
                memory_used=optimized_memory,
                operations_per_second=0,
                additional_info={"pixel_count": pixel_count}
            ))
            
            print(f"‚úÖ Memory {pixel_count} pixels: Optimized {optimized_memory/1024:.1f}KB")

    async def test_comparative_benchmarks(self):
        """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print("\n‚öñÔ∏è  –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏...")
        
        # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–æ–∑–¥–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ -> –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ -> –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        await self._test_full_cycle_benchmark()

    async def _test_full_cycle_benchmark(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        num_pixels = 20000
        num_retrievals = 50
        
        # OptimizedCanvas –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        start_time = time.time()
        memory_before = self.measure_memory()
        
        optimized_canvas = config.OptimizedCanvas(2000, 600)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        for _ in range(num_pixels):
            x = random.randint(0, 1999)
            y = random.randint(0, 599)
            color = random.choice(config.colors) if config.colors else "#FF0000"
            optimized_canvas.set_pixel(x, y, color)
        
        # –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        for _ in range(num_retrievals):
            active_pixels = optimized_canvas.get_active_pixels()
        
        optimized_duration = time.time() - start_time
        memory_after = self.measure_memory()
        optimized_memory = memory_after - memory_before
        
        # LegacyCanvas –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–º–µ–Ω—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞)
        reduced_pixels = min(5000, num_pixels)
        reduced_retrievals = min(10, num_retrievals)
        
        start_time = time.time()
        memory_before = self.measure_memory()
        
        legacy_canvas = LegacyCanvas(2000, 600)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        for _ in range(reduced_pixels):
            x = random.randint(0, 1999)
            y = random.randint(0, 599)
            color = random.choice(config.colors) if config.colors else "#FF0000"
            legacy_canvas.set_pixel(x, y, color)
        
        # –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        for _ in range(reduced_retrievals):
            active_pixels = legacy_canvas.get_active_pixels_old_way()
        
        legacy_duration = time.time() - start_time
        memory_after = self.measure_memory()
        legacy_memory = memory_after - memory_before
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        legacy_duration_normalized = legacy_duration * (num_pixels / reduced_pixels) * (num_retrievals / reduced_retrievals)
        
        self.results.append(BenchmarkResult(
            name="Full Cycle - Optimized",
            duration=optimized_duration,
            memory_used=optimized_memory,
            operations_per_second=(num_pixels + num_retrievals) / optimized_duration,
            additional_info={
                "pixels_set": num_pixels,
                "retrievals": num_retrievals,
                "active_pixels": len(active_pixels)
            }
        ))
        
        self.results.append(BenchmarkResult(
            name="Full Cycle - Legacy (normalized)",
            duration=legacy_duration_normalized,
            memory_used=legacy_memory,
            operations_per_second=(num_pixels + num_retrievals) / legacy_duration_normalized,
            additional_info={
                "pixels_set": reduced_pixels,
                "retrievals": reduced_retrievals,
                "normalized": True
            }
        ))
        
        speedup = legacy_duration_normalized / optimized_duration if optimized_duration > 0 else float('inf')
        memory_efficiency = legacy_memory / optimized_memory if optimized_memory > 0 else float('inf')
        
        print(f"‚úÖ Full Cycle: {speedup:.1f}x faster, {memory_efficiency:.1f}x memory efficient")

    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*80)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        categories = {}
        for result in self.results:
            category = result.name.split(" - ")[0]
            if category not in categories:
                categories[category] = []
            categories[category].append(result)
        
        for category, results in categories.items():
            print(f"\nüìä {category}:")
            print("-" * 40)
            
            for result in results:
                print(f"  ‚Ä¢ {result.name}")
                print(f"    ‚è±Ô∏è  –í—Ä–µ–º—è: {result.duration:.4f}s")
                if result.memory_used > 0:
                    print(f"    üß† –ü–∞–º—è—Ç—å: {result.memory_used/1024:.1f}KB")
                if result.operations_per_second > 0:
                    print(f"    üöÄ –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {result.operations_per_second:.1f}")
                if result.additional_info:
                    info_str = ", ".join([f"{k}: {v}" for k, v in result.additional_info.items()])
                    print(f"    ‚ÑπÔ∏è  –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info_str}")
                print()
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüèÜ –°–í–û–î–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô:")
        print("-" * 40)
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        optimized_results = [r for r in self.results if "Optimized" in r.name or "OptimizedCanvas" in r.name]
        legacy_results = [r for r in self.results if "Legacy" in r.name]
        
        for opt_result in optimized_results:
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π legacy —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            base_name = opt_result.name.replace("OptimizedCanvas", "").replace("Optimized", "").replace(" - ", "")
            legacy_result = None
            
            for leg_result in legacy_results:
                if base_name in leg_result.name or any(word in leg_result.name for word in base_name.split()):
                    legacy_result = leg_result
                    break
            
            if legacy_result:
                if opt_result.duration > 0 and legacy_result.duration > 0:
                    speedup = legacy_result.duration / opt_result.duration
                    print(f"  ‚ö° {base_name.strip()}: {speedup:.1f}x –±—ã—Å—Ç—Ä–µ–µ")
                
                if opt_result.memory_used > 0 and legacy_result.memory_used > 0:
                    memory_improvement = legacy_result.memory_used / opt_result.memory_used
                    print(f"  üß† {base_name.strip()}: {memory_improvement:.1f}x –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏")

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    tester = PerformanceTester()
    
    print("üî• –ê–í–¢–û–¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò pixel-battle")
    print("=" * 50)
    
    start_time = time.time()
    results = await tester.run_all_tests()
    total_time = time.time() - start_time
    
    tester.print_results()
    
    print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìã –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main())
