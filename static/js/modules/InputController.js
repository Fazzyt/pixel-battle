/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–≤–æ–¥–∞
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—ã—à—å, —Ç–∞—á, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–µ—Å—Ç–∞–º–∏ –∏ –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
 */

import { appState } from './StateManager.js';

export class InputController {
    constructor(canvas, config) {
        this.canvas = canvas;
        this.config = config;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞
        this.inputState = {
            mouse: { x: 0, y: 0, buttons: 0 },
            touch: { touches: [], lastDistance: 0 },
            keyboard: { keys: new Set() },
            gestures: { 
                isDragging: false, 
                isZooming: false,
                dragStart: null,
                zoomStart: null
            }
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.settings = {
            dragButton: 2, // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
            zoomSensitivity: 0.1,
            dragSensitivity: 1,
            touchZoomSensitivity: 0.005,
            keyboardZoomStep: 0.1,
            keyboardMoveStep: 50,
            doubleClickTime: 300,
            longPressTime: 500
        };
        
        // –¢–∞–π–º–µ—Ä—ã
        this.timers = {
            doubleClick: null,
            longPress: null
        };
        
        // Throttled —Ñ—É–Ω–∫—Ü–∏–∏
        this.throttledMouseMove = this.throttle(this.handleMouseMove.bind(this), 16);
        this.throttledTouchMove = this.throttle(this.handleTouchMove.bind(this), 16);
        
        this.setupEventListeners();
        this.setupKeyboardShortcuts();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
        this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));
        this.canvas.addEventListener('mousemove', this.throttledMouseMove);
        this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));
        this.canvas.addEventListener('wheel', this.handleWheel.bind(this));
        this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());
        this.canvas.addEventListener('mouseleave', this.handleMouseLeave.bind(this));
        
        // –°–æ–±—ã—Ç–∏—è —Ç–∞—á
        this.canvas.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
        this.canvas.addEventListener('touchmove', this.throttledTouchMove, { passive: false });
        this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });
        this.canvas.addEventListener('touchcancel', this.handleTouchEnd.bind(this), { passive: false });
        
        // –°–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
        document.addEventListener('keyup', this.handleKeyUp.bind(this));
        
        // –°–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞
        window.addEventListener('blur', this.handleWindowBlur.bind(this));
        window.addEventListener('resize', this.handleWindowResize.bind(this));
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏
     */
    handleMouseDown(event) {
        event.preventDefault();
        
        this.inputState.mouse.buttons = event.buttons;
        this.updateMousePosition(event);
        
        const canvasPos = this.screenToCanvas(event.clientX, event.clientY);
        
        if (event.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            if (canvasPos) {
                this.handlePixelSelection(canvasPos);
                this.handleDoubleClick(event);
            }
        } else if (event.button === this.settings.dragButton) { // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞
            this.startDragging(event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
     */
    handleMouseMove(event) {
        this.updateMousePosition(event);
        
        const canvasPos = this.screenToCanvas(event.clientX, event.clientY);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã
        if (canvasPos) {
            appState.set('ui.cursorPosition', canvasPos);
        } else {
            appState.set('ui.cursorPosition', null);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (this.inputState.gestures.isDragging) {
            this.updateDragPosition(event);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
     */
    handleMouseUp(event) {
        this.inputState.mouse.buttons = event.buttons;
        
        if (event.button === this.settings.dragButton) {
            this.stopDragging();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
     */
    handleWheel(event) {
        event.preventDefault();
        
        const delta = -Math.sign(event.deltaY);
        const zoomFactor = 1 + this.settings.zoomSensitivity * delta;
        
        const mousePos = { x: event.clientX, y: event.clientY };
        
        console.log('üñ±Ô∏è Mouse wheel:', {
            deltaY: event.deltaY,
            delta,
            zoomFactor,
            mousePos,
            currentScale: appState.get('canvas.scale')
        });
        
        this.zoomAtPoint(mousePos, zoomFactor);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–∞—á
     */
    handleTouchStart(event) {
        event.preventDefault();
        
        this.inputState.touch.touches = Array.from(event.touches);
        
        if (event.touches.length === 1) {
            const touch = event.touches[0];
            const canvasPos = this.screenToCanvas(touch.clientX, touch.clientY);
            if (canvasPos) {
                this.handlePixelSelection(canvasPos);
                this.startLongPress(touch);
            }
        } else if (event.touches.length === 2) {
            this.startTouchZoom(event.touches);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–∞—á
     */
    handleTouchMove(event) {
        event.preventDefault();
        
        this.inputState.touch.touches = Array.from(event.touches);
        
        if (event.touches.length === 1 && !this.inputState.gestures.isZooming) {
            const touch = event.touches[0];
            const canvasPos = this.screenToCanvas(touch.clientX, touch.clientY);
            if (canvasPos) {
                this.handleTouchDrag(touch);
            }
        } else if (event.touches.length === 2) {
            this.handleTouchZoom(event.touches);
        }
        
        // –û—Ç–º–µ–Ω—è–µ–º long press –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
        this.cancelLongPress();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—á
     */
    handleTouchEnd(event) {
        event.preventDefault();
        
        this.inputState.touch.touches = Array.from(event.touches);
        
        if (event.touches.length === 0) {
            this.stopAllGestures();
        } else if (event.touches.length === 1) {
            this.inputState.gestures.isZooming = false;
        }
        
        this.cancelLongPress();
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
     */
    handleKeyDown(event) {
        this.inputState.keyboard.keys.add(event.code);
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∞–≤–∏—à
        const preventKeys = ['Space', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];
        if (preventKeys.includes(event.code)) {
            event.preventDefault();
        }
        
        this.handleKeyboardShortcuts(event);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
     */
    handleKeyUp(event) {
        this.inputState.keyboard.keys.delete(event.code);
    }
    
    /**
     * –í—ã–±–æ—Ä –ø–∏–∫—Å–µ–ª—è
     */
    handlePixelSelection(canvasPos) {
        if (this.isValidCanvasPosition(canvasPos)) {
            appState.set('canvas.selectedPixel', {
                x: canvasPos.x,
                y: canvasPos.y
            });
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
     */
    handleDoubleClick(event) {
        if (this.timers.doubleClick) {
            // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ö–æ–ª—Å—Ç
            this.centerCanvas();
            clearTimeout(this.timers.doubleClick);
            this.timers.doubleClick = null;
        } else {
            this.timers.doubleClick = setTimeout(() => {
                this.timers.doubleClick = null;
            }, this.settings.doubleClickTime);
        }
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    startDragging(event) {
        this.inputState.gestures.isDragging = true;
        
        const currentOffset = {
            offsetX: appState.get('canvas.offsetX'),
            offsetY: appState.get('canvas.offsetY')
        };
        
        this.inputState.gestures.dragStart = {
            x: event.clientX,
            y: event.clientY,
            offsetX: currentOffset.offsetX,
            offsetY: currentOffset.offsetY
        };
        
        console.log('üñ±Ô∏è Starting drag:', { 
            mousePos: { x: event.clientX, y: event.clientY },
            currentOffset: currentOffset,
            dragStart: this.inputState.gestures.dragStart
        });
        
        this.canvas.style.cursor = 'grabbing';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
     */
    updateDragPosition(event) {
        if (!this.inputState.gestures.isDragging) return;
        
        console.log('üñ±Ô∏è updateDragPosition called:', { 
            isDragging: this.inputState.gestures.isDragging,
            dragStart: this.inputState.gestures.dragStart,
            mousePos: { x: event.clientX, y: event.clientY }
        });
        
        const dragStart = this.inputState.gestures.dragStart;
        const deltaX = (event.clientX - dragStart.x) * this.settings.dragSensitivity;
        const deltaY = (event.clientY - dragStart.y) * this.settings.dragSensitivity;
        
        const newOffsets = {
            offsetX: dragStart.offsetX + deltaX,
            offsetY: dragStart.offsetY + deltaY
        };
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        const currentState = appState.get('canvas');
        const scale = currentState.scale;
        
        // –†–∞–∑–º–µ—Ä—ã –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—Å —É—á–µ—Ç–æ–º PIXEL_SIZE)
        const logicalCanvasWidth = this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE;
        const logicalCanvasHeight = this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞
        const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
        const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∞–π–¥–±–∞—Ä —Å–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å = –≤—Å—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        let availableWidth = windowWidth;
        let availableHeight = windowHeight - headerHeight;
        
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
        if (window.innerWidth > 768) {
            availableWidth = windowWidth - sidebarWidth;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        const canvasContainer = document.querySelector('.canvas-container');
        const containerRect = canvasContainer ? canvasContainer.getBoundingClientRect() : { width: 0, height: 0 };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        const finalWidth = containerRect.width > 0 ? containerRect.width : availableWidth;
        const finalHeight = containerRect.height > 0 ? containerRect.height : availableHeight;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ X –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        if (logicalCanvasWidth * scale > finalWidth) {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            newOffsets.offsetX = Math.min(0, Math.max(newOffsets.offsetX, finalWidth - logicalCanvasWidth * scale));
        } else {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
            // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
            const maxOffset = Math.max(0, finalWidth - logicalCanvasWidth * scale);
            newOffsets.offsetX = Math.max(-maxOffset, Math.min(newOffsets.offsetX, maxOffset));
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ Y –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        if (logicalCanvasHeight * scale > finalHeight) {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            newOffsets.offsetY = Math.min(headerHeight, Math.max(newOffsets.offsetY, finalHeight - logicalCanvasHeight * scale));
        } else {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
            // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
            const maxOffset = Math.max(0, finalHeight - logicalCanvasHeight * scale);
            newOffsets.offsetY = Math.max(headerHeight - maxOffset, Math.min(newOffsets.offsetY, headerHeight + maxOffset));
        }
        
        console.log('üñ±Ô∏è Updating drag position:', { 
            currentMouse: { x: event.clientX, y: event.clientY },
            rawDelta: { x: event.clientX - dragStart.x, y: event.clientY - dragStart.y },
            scaledDelta: { x: deltaX, y: deltaY },
            dragSensitivity: this.settings.dragSensitivity,
            newOffsets: newOffsets,
            finalArea: { width: finalWidth, height: finalHeight }
        });
        
        appState.batchUpdate({
            'canvas.offsetX': newOffsets.offsetX,
            'canvas.offsetY': newOffsets.offsetY
        });
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    stopDragging() {
        this.inputState.gestures.isDragging = false;
        this.inputState.gestures.dragStart = null;
        this.canvas.style.cursor = 'default';
    }
    
    /**
     * –ù–∞—á–∞–ª–æ touch zoom
     */
    startTouchZoom(touches) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∑—É–º–∞
        const centerX = (touches[0].clientX + touches[1].clientX) / 2;
        const centerY = (touches[0].clientY + touches[1].clientY) / 2;
        
        const centerCanvasPos = this.screenToCanvas(centerX, centerY);
        if (centerCanvasPos) {
            this.inputState.gestures.isZooming = true;
            this.inputState.touch.lastDistance = this.getTouchDistance(touches);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ touch zoom
     */
    handleTouchZoom(touches) {
        if (!this.inputState.gestures.isZooming) return;
        
        const currentDistance = this.getTouchDistance(touches);
        const deltaDistance = currentDistance - this.inputState.touch.lastDistance;
        
        const zoomFactor = 1 + deltaDistance * this.settings.touchZoomSensitivity;
        
        // –ó—É–º–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –º–µ–∂–¥—É –ø–∞–ª—å—Ü–∞–º–∏
        const centerX = (touches[0].clientX + touches[1].clientX) / 2;
        const centerY = (touches[0].clientY + touches[1].clientY) / 2;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        const centerCanvasPos = this.screenToCanvas(centerX, centerY);
        if (centerCanvasPos) {
            this.zoomAtPoint({ x: centerX, y: centerY }, zoomFactor);
        }
        
        this.inputState.touch.lastDistance = currentDistance;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ touch –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleTouchDrag(touch) {
        const currentState = appState.get('canvas');
        
        if (this.inputState.gestures.dragStart) {
            const deltaX = touch.clientX - this.inputState.gestures.dragStart.x;
            const deltaY = touch.clientY - this.inputState.gestures.dragStart.y;
            
            const newOffsets = {
                offsetX: this.inputState.gestures.dragStart.offsetX + deltaX,
                offsetY: this.inputState.gestures.dragStart.offsetY + deltaY
            };
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            const scale = currentState.scale;
            
            // –†–∞–∑–º–µ—Ä—ã –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—Å —É—á–µ—Ç–æ–º PIXEL_SIZE)
            const logicalCanvasWidth = this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE;
            const logicalCanvasHeight = this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE;
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞
            const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
            const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;
            
            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∞–π–¥–±–∞—Ä —Å–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å = –≤—Å—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
            let availableWidth = windowWidth;
            let availableHeight = windowHeight - headerHeight;
            
            // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
            if (window.innerWidth > 768) {
                availableWidth = windowWidth - sidebarWidth;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            const canvasContainer = document.querySelector('.canvas-container');
            const containerRect = canvasContainer ? canvasContainer.getBoundingClientRect() : { width: 0, height: 0 };
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            const finalWidth = containerRect.width > 0 ? containerRect.width : availableWidth;
            const finalHeight = containerRect.height > 0 ? containerRect.height : availableHeight;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ X –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            if (logicalCanvasWidth * scale > finalWidth) {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                newOffsets.offsetX = Math.min(0, Math.max(newOffsets.offsetX, finalWidth - logicalCanvasWidth * scale));
            } else {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
                // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
                const maxOffset = Math.max(0, finalWidth - logicalCanvasWidth * scale);
                newOffsets.offsetX = Math.max(-maxOffset, Math.min(newOffsets.offsetX, maxOffset));
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ Y –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            if (logicalCanvasHeight * scale > finalHeight) {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                newOffsets.offsetY = Math.min(headerHeight, Math.max(newOffsets.offsetY, finalHeight - logicalCanvasHeight * scale));
            } else {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
                // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
                const maxOffset = Math.max(0, finalHeight - logicalCanvasHeight * scale);
                newOffsets.offsetY = Math.max(headerHeight - maxOffset, Math.min(newOffsets.offsetY, headerHeight + maxOffset));
            }
            
            appState.batchUpdate({
                'canvas.offsetX': newOffsets.offsetX,
                'canvas.offsetY': newOffsets.offsetY
            });
        } else {
            // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            this.inputState.gestures.isDragging = true;
            this.inputState.gestures.dragStart = {
                x: touch.clientX,
                y: touch.clientY,
                offsetX: currentState.offsetX,
                offsetY: currentState.offsetY
            };
        }
    }
    
    /**
     * –ù–∞—á–∞–ª–æ long press
     */
    startLongPress(touch) {
        this.timers.longPress = setTimeout(() => {
            // Long press - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            const canvasPos = this.screenToCanvas(touch.clientX, touch.clientY);
            if (canvasPos) {
                appState.set('ui.contextMenu', {
                    x: touch.clientX,
                    y: touch.clientY,
                    canvasPos: canvasPos,
                    visible: true
                });
            }
        }, this.settings.longPressTime);
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ long press
     */
    cancelLongPress() {
        if (this.timers.longPress) {
            clearTimeout(this.timers.longPress);
            this.timers.longPress = null;
        }
    }
    
    /**
     * –ó—É–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ
     */
    zoomAtPoint(screenPoint, zoomFactor) {
        const currentState = appState.get('canvas');
        const { scale, offsetX, offsetY } = currentState;
        
        const newScale = Math.max(0.1, Math.min(20, scale * zoomFactor));
        
        if (newScale !== scale) {
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ offsets –¥–ª—è –∑—É–º–∞ –≤ —Ç–æ—á–∫–µ
            const mouseCanvasX = (screenPoint.x - offsetX) / scale;
            const mouseCanvasY = (screenPoint.y - offsetY) / scale;
            
            let newOffsetX = screenPoint.x - mouseCanvasX * newScale;
            let newOffsetY = screenPoint.y - mouseCanvasY * newScale;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ offsets –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            const logicalCanvasWidth = this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE;
            const logicalCanvasHeight = this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE;
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞
            const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
            const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;
            
            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∞–π–¥–±–∞—Ä —Å–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å = –≤—Å—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
            let availableWidth = windowWidth;
            let availableHeight = windowHeight - headerHeight;
            
            // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
            if (window.innerWidth > 768) {
                availableWidth = windowWidth - sidebarWidth;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            const canvasContainer = document.querySelector('.canvas-container');
            const containerRect = canvasContainer ? canvasContainer.getBoundingClientRect() : { width: 0, height: 0 };
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
            const finalWidth = containerRect.width > 0 ? containerRect.width : availableWidth;
            const finalHeight = containerRect.height > 0 ? containerRect.height : availableHeight;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ X –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            if (logicalCanvasWidth * newScale > finalWidth) {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                newOffsetX = Math.min(0, Math.max(newOffsetX, finalWidth - logicalCanvasWidth * newScale));
            } else {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
                // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
                const maxOffset = Math.max(0, finalWidth - logicalCanvasWidth * newScale);
                newOffsetX = Math.max(-maxOffset, Math.min(newOffsetX, maxOffset));
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ Y –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
            if (logicalCanvasHeight * newScale > finalHeight) {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                newOffsetY = Math.min(headerHeight, Math.max(newOffsetY, finalHeight - logicalCanvasHeight * newScale));
            } else {
                // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
                // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
                const maxOffset = Math.max(0, finalHeight - logicalCanvasHeight * newScale);
                newOffsetY = Math.max(headerHeight - maxOffset, Math.min(newOffsetY, headerHeight + maxOffset));
            }
            
            console.log('üîç Zoom at point:', {
                screenPoint,
                oldScale: scale,
                newScale,
                oldOffsets: { x: offsetX, y: offsetY },
                newOffsets: { x: newOffsetX, y: newOffsetY },
                mouseCanvasPos: { x: mouseCanvasX, y: mouseCanvasY }
            });
            
            appState.batchUpdate({
                'canvas.scale': newScale,
                'canvas.offsetX': newOffsetX,
                'canvas.offsetY': newOffsetY
            });
        }
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–∞–π–¥–±–∞—Ä–∞
     */
    toggleSidebar() {
        const sidePanel = document.querySelector('.side-panel');
        const canvasContainer = document.querySelector('.canvas-container');
        const topBar = document.querySelector('.top-bar');
        
        if (sidePanel) {
            const isHidden = sidePanel.classList.contains('hidden');
            
            if (isHidden) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
                sidePanel.classList.remove('hidden');
                if (canvasContainer) canvasContainer.style.marginRight = 'var(--sidebar-width)';
                if (topBar) topBar.style.right = 'var(--sidebar-width)';
                console.log('üìã InputController: Sidebar shown');
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
                sidePanel.classList.add('hidden');
                if (canvasContainer) canvasContainer.style.marginRight = '0';
                if (topBar) topBar.style.right = '0';
                console.log('üìã InputController: Sidebar hidden');
            }
            
            // –ü–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
            setTimeout(() => {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                const windowWidth = window.innerWidth;
                const windowHeight = window.innerHeight;
                const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
                const sidebarWidth = isHidden ? 300 : 0;
                
                const availableWidth = window.innerWidth > 768 ? windowWidth - sidebarWidth : windowWidth;
                const availableHeight = windowHeight - headerHeight;
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                canvasContainer.style.width = availableWidth + 'px';
                canvasContainer.style.height = availableHeight + 'px';
                
                this.centerCanvas();
                console.log('üéØ InputController: Canvas recentered after sidebar toggle');
            }, 300);
        }
    }
    
    /**
     * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
     */
    centerCanvas() {
        const rect = this.canvas.getBoundingClientRect();
        const scale = appState.get('canvas.scale');
        
        // –†–∞–∑–º–µ—Ä—ã –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—Å —É—á–µ—Ç–æ–º PIXEL_SIZE)
        const logicalCanvasWidth = this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE;
        const logicalCanvasHeight = this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞
        const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
        const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∞–π–¥–±–∞—Ä —Å–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å = –≤—Å—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        let availableWidth = windowWidth;
        let availableHeight = windowHeight - headerHeight;
        
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
        if (window.innerWidth > 768) {
            availableWidth = windowWidth - sidebarWidth;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        const canvasContainer = document.querySelector('.canvas-container');
        const containerRect = canvasContainer ? canvasContainer.getBoundingClientRect() : { width: 0, height: 0 };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        const finalWidth = containerRect.width > 0 ? containerRect.width : availableWidth;
        const finalHeight = containerRect.height > 0 ? containerRect.height : availableHeight;
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
        let newOffsetX = (finalWidth - logicalCanvasWidth * scale) / 2;
        let newOffsetY = (finalHeight - logicalCanvasHeight * scale) / 2;
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞–Ω–≤–∞—Å –Ω–µ —É—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        if (logicalCanvasWidth * scale > finalWidth) {
            newOffsetX = 0;
        } else {
            // –ü–æ–∑–≤–æ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
            const maxOffset = Math.max(0, finalWidth - logicalCanvasWidth * scale);
            newOffsetX = Math.max(-maxOffset, Math.min(newOffsetX, maxOffset));
        }
        
        if (logicalCanvasHeight * scale > finalHeight) {
            newOffsetY = headerHeight;
        } else {
            // –ü–æ–∑–≤–æ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
            const maxOffset = Math.max(0, finalHeight - logicalCanvasHeight * scale);
            newOffsetY = Math.max(headerHeight - maxOffset, Math.min(newOffsetY, headerHeight + maxOffset));
        }
        
        console.log('üéØ InputController centering canvas:', {
            canvasRect: { width: rect.width, height: rect.height },
            windowSize: { width: windowWidth, height: windowHeight },
            availableArea: { width: availableWidth, height: availableHeight },
            finalArea: { width: finalWidth, height: finalHeight },
            logicalCanvas: { width: logicalCanvasWidth, height: logicalCanvasHeight },
            scale: scale,
            headerHeight: headerHeight,
            sidebarWidth: sidebarWidth,
            isMobile: window.innerWidth <= 768,
            center: { x: newOffsetX, y: newOffsetY },
            config: {
                CANVAS_WIDTH: this.config.CANVAS_WIDTH,
                CANVAS_HEIGHT: this.config.CANVAS_HEIGHT,
                PIXEL_SIZE: this.config.PIXEL_SIZE,
                calculatedSize: {
                    width: this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE,
                    height: this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE
                }
            }
        });
        
        appState.batchUpdate({
            'canvas.offsetX': newOffsetX,
            'canvas.offsetY': newOffsetY
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
     */
    setupKeyboardShortcuts() {
        this.shortcuts = {
            'KeyB': () => this.toggleSidebar(),
            'Space': () => this.centerCanvas(),
            'Equal': () => this.zoomAtCenter(1.2),
            'Minus': () => this.zoomAtCenter(0.8),
            'Digit0': () => this.resetZoom(),
            'ArrowLeft': () => this.moveCanvas(this.settings.keyboardMoveStep, 0),
            'ArrowRight': () => this.moveCanvas(-this.settings.keyboardMoveStep, 0),
            'ArrowUp': () => this.moveCanvas(0, this.settings.keyboardMoveStep),
            'ArrowDown': () => this.moveCanvas(0, -this.settings.keyboardMoveStep)
        };
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–π
     */
    handleKeyboardShortcuts(event) {
        const shortcut = this.shortcuts[event.code];
        if (shortcut && !event.ctrlKey && !event.altKey && !event.metaKey) {
            shortcut();
            event.preventDefault();
        }
    }
    
    /**
     * –ó—É–º –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
     */
    zoomAtCenter(factor) {
        const rect = this.canvas.getBoundingClientRect();
        const centerPoint = {
            x: rect.width / 2,
            y: rect.height / 2
        };
        this.zoomAtPoint(centerPoint, factor);
    }
    
    /**
     * –°–±—Ä–æ—Å –∑—É–º–∞
     */
    resetZoom() {
        appState.set('canvas.scale', 1);
        this.centerCanvas();
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
     */
    moveCanvas(deltaX, deltaY) {
        const currentState = appState.get('canvas');
        const rect = this.canvas.getBoundingClientRect();
        const scale = currentState.scale;
        
        console.log('üéØ moveCanvas called:', { deltaX, deltaY, currentScale: scale, currentOffsets: { x: currentState.offsetX, y: currentState.offsetY } });
        
        // –†–∞–∑–º–µ—Ä—ã –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—Å —É—á–µ—Ç–æ–º PIXEL_SIZE)
        const logicalCanvasWidth = this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE;
        const logicalCanvasHeight = this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞
        const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
        const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∞–π–¥–±–∞—Ä —Å–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å = –≤—Å—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        let availableWidth = windowWidth;
        let availableHeight = windowHeight - headerHeight;
        
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
        if (window.innerWidth > 768) {
            availableWidth = windowWidth - sidebarWidth;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        const canvasContainer = document.querySelector('.canvas-container');
        const containerRect = canvasContainer ? canvasContainer.getBoundingClientRect() : { width: 0, height: 0 };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        const finalWidth = containerRect.width > 0 ? containerRect.width : availableWidth;
        const finalHeight = containerRect.height > 0 ? containerRect.height : availableHeight;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        let newOffsetX = currentState.offsetX + deltaX;
        let newOffsetY = currentState.offsetY + deltaY;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ X –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        if (logicalCanvasWidth * scale > finalWidth) {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            newOffsetX = Math.min(0, Math.max(newOffsetX, finalWidth - logicalCanvasWidth * scale));
        } else {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
            // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
            const maxOffset = Math.max(0, finalWidth - logicalCanvasWidth * scale);
            newOffsetX = Math.max(-maxOffset, Math.min(newOffsetX, maxOffset));
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ Y –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        if (logicalCanvasHeight * scale > finalHeight) {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            newOffsetY = Math.min(headerHeight, Math.max(newOffsetY, finalHeight - logicalCanvasHeight * scale));
        } else {
            // –ï—Å–ª–∏ –∫–∞–Ω–≤–∞—Å –º–µ–Ω—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–æ–∑–≤–æ–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è
            // –Ω–æ –Ω–µ —É—Ö–æ–¥–∏–º —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∫—Ä–∞–µ–≤
            const maxOffset = Math.max(0, finalHeight - logicalCanvasHeight * scale);
            newOffsetY = Math.max(headerHeight - maxOffset, Math.min(newOffsetY, headerHeight + maxOffset));
        }
        
        console.log('üéØ Moving canvas:', {
            delta: { x: deltaX, y: deltaY },
            currentOffset: { x: currentState.offsetX, y: currentState.offsetY },
            newOffset: { x: newOffsetX, y: newOffsetY },
            logicalCanvas: { width: logicalCanvasWidth, height: logicalCanvasHeight },
            scale: scale,
            availableArea: { width: availableWidth, height: availableHeight },
            finalArea: { width: finalWidth, height: finalHeight },
            config: {
                CANVAS_WIDTH: this.config.CANVAS_WIDTH,
                CANVAS_HEIGHT: this.config.CANVAS_HEIGHT,
                PIXEL_SIZE: this.config.PIXEL_SIZE,
                calculatedSize: {
                    width: this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE,
                    height: this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE
                }
            }
        });
        
        appState.batchUpdate({
            'canvas.offsetX': newOffsetX,
            'canvas.offsetY': newOffsetY
        });
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    
    updateMousePosition(event) {
        this.inputState.mouse.x = event.clientX;
        this.inputState.mouse.y = event.clientY;
    }
    
    screenToCanvas(screenX, screenY) {
        const rect = this.canvas.getBoundingClientRect();
        const currentState = appState.get('canvas');
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–Ω–≤–∞—Å–∞
        const x = Math.floor((screenX - rect.left - currentState.offsetX) / 
                           (this.config.PIXEL_SIZE * currentState.scale));
        const y = Math.floor((screenY - rect.top - currentState.offsetY) / 
                           (this.config.PIXEL_SIZE * currentState.scale));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if (this.isValidCanvasPosition({ x, y })) {
            return { x, y };
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –∫–∞–Ω–≤–∞—Å–∞
            return null;
        }
    }
    
    isValidCanvasPosition(pos) {
        return pos.x >= 0 && pos.x < this.config.CANVAS_WIDTH &&
               pos.y >= 0 && pos.y < this.config.CANVAS_HEIGHT;
    }
    
    getTouchDistance(touches) {
        return Math.hypot(
            touches[0].clientX - touches[1].clientX,
            touches[0].clientY - touches[1].clientY
        );
    }
    
    stopAllGestures() {
        this.inputState.gestures = {
            isDragging: false,
            isZooming: false,
            dragStart: null,
            zoomStart: null
        };
        this.canvas.style.cursor = 'default';
    }
    
    handleMouseLeave() {
        this.stopAllGestures();
        appState.set('ui.cursorPosition', null);
    }
    
    handleWindowBlur() {
        this.inputState.keyboard.keys.clear();
        this.stopAllGestures();
    }
    
    handleWindowResize() {
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
        if (appState.get('canvas.scale') === 1) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;
            const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
            const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
            
            const availableWidth = window.innerWidth > 768 ? windowWidth - sidebarWidth : windowWidth;
            const availableHeight = windowHeight - headerHeight;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            const canvasContainer = document.querySelector('.canvas-container');
            if (canvasContainer) {
                canvasContainer.style.width = availableWidth + 'px';
                canvasContainer.style.height = availableHeight + 'px';
            }
            
            this.centerCanvas();
        }
    }
    
    throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞
     */
    getInputState() {
        return {
            ...this.inputState,
            activeKeys: Array.from(this.inputState.keyboard.keys)
        };
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        Object.values(this.timers).forEach(timer => {
            if (timer) clearTimeout(timer);
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.stopAllGestures();
    }
}
