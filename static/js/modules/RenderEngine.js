/**
 * –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç requestAnimationFrame, viewport culling –∏ smart redraw
 */

import { appState } from './StateManager.js';

export class RenderEngine {
    constructor(canvas, config) {
        this.canvas = canvas;
        this.ctx = canvas.getContext('2d');
        this.config = config;
        
        console.log('üé® RenderEngine constructor:', {
            canvas: this.canvas,
            context: !!this.ctx,
            canvasSize: { width: this.canvas.width, height: this.canvas.height },
            config: this.config
        });
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        this.isRendering = false;
        this.needsRedraw = true;
        this.lastFrameTime = 0;
        this.frameCount = 0;
        this.fpsCounter = 0;
        
        // Viewport –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        this.viewport = {
            x: 0, y: 0, width: 0, height: 0
        };
        
        // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.pixelBuffer = new Map();
        this.dirtyRegions = new Set();
        
        // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.performanceMetrics = {
            fps: 0,
            renderTime: 0,
            pixelsRendered: 0,
            cullRatio: 0
        };
        
        // Throttled —Ñ—É–Ω–∫—Ü–∏–∏
        this.throttledRender = this.throttle(this.render.bind(this), 16); // 60 FPS
        
        this.setupEventListeners();
        this.startRenderLoop();
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    startRenderLoop() {
        console.log('üé¨ Starting render loop');
        
        const renderFrame = (timestamp) => {
            this.updatePerformanceMetrics(timestamp);
            
            if (this.needsRedraw && !this.isRendering) {
                this.render();
            }
            
            requestAnimationFrame(renderFrame);
        };
        
        requestAnimationFrame(renderFrame);
        console.log('üé¨ Render loop started with requestAnimationFrame');
    }
    
    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
     */
    render() {
        const startTime = performance.now();
        this.isRendering = true;
        
        const state = appState.get('canvas');
        console.log('üé® Rendering frame:', {
            needsRedraw: this.needsRedraw,
            canvasState: state,
            pixelsCount: state?.pixels?.size || 0
        });
        const { scale, offsetX, offsetY, pixels, selectedPixel } = state;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ö–æ–ª—Å—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.updateCanvasSize();
        
        // –í—ã—á–∏—Å–ª—è–µ–º viewport –¥–ª—è culling
        this.updateViewport(scale, offsetX, offsetY);
        
        // –†–∏—Å—É–µ–º —Ñ–æ–Ω (–≤–∫–ª—é—á–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É canvas)
        this.renderBackground(scale, offsetX, offsetY);
        
        // –†–∏—Å—É–µ–º –ø–∏–∫—Å–µ–ª–∏ —Å viewport culling
        const renderedPixels = this.renderPixels(pixels, scale, offsetX, offsetY);
        
        // –†–∏—Å—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
        if (selectedPixel) {
            this.renderSelectedPixel(selectedPixel, scale, offsetX, offsetY);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        const renderTime = performance.now() - startTime;
        this.updateRenderMetrics(renderTime, renderedPixels);
        
        this.needsRedraw = false;
        this.isRendering = false;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ñ–æ–Ω–∞
     */
    renderBackground(scale, offsetX, offsetY) {
        // –û—á–∏—â–∞–µ–º –≤–µ—Å—å canvas –ø–µ—Ä–µ–¥ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —Ñ–æ–Ω–∞
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –†–∏—Å—É–µ–º —Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è –í–°–ï–ì–û —ç–∫—Ä–∞–Ω–∞
        this.ctx.fillStyle = '#808080';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –¢–µ–ø–µ—Ä—å —Ä–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –∫–∞–Ω–≤–∞—Å–∞ –ø–æ–≤–µ—Ä—Ö
        const logicalCanvasWidth = this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE * scale;
        const logicalCanvasHeight = this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE * scale;
        
        // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –∫–∞–Ω–≤–∞—Å–∞ –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.fillRect(
            offsetX,
            offsetY,
            logicalCanvasWidth,
            logicalCanvasHeight
        );
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—É—Å—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏ —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º
        // –°–ø—Ä–∞–≤–∞ –æ—Ç –∫–∞–Ω–≤–∞—Å–∞
        if (offsetX + logicalCanvasWidth < this.canvas.width) {
            this.ctx.fillStyle = '#808080';
            this.ctx.fillRect(
                offsetX + logicalCanvasWidth,
                0,
                this.canvas.width - (offsetX + logicalCanvasWidth),
                this.canvas.height
            );
        }
        
        // –°–ª–µ–≤–∞ –æ—Ç –∫–∞–Ω–≤–∞—Å–∞
        if (offsetX > 0) {
            this.ctx.fillStyle = '#808080';
            this.ctx.fillRect(
                0,
                0,
                offsetX,
                this.canvas.height
            );
        }
        
        // –°–≤–µ—Ä—Ö—É –æ—Ç –∫–∞–Ω–≤–∞—Å–∞
        if (offsetY > 0) {
            this.ctx.fillStyle = '#808080';
            this.ctx.fillRect(
                0,
                0,
                this.canvas.width,
                offsetY
            );
        }
        
        // –°–Ω–∏–∑—É –æ—Ç –∫–∞–Ω–≤–∞—Å–∞
        if (offsetY + logicalCanvasHeight < this.canvas.height) {
            this.ctx.fillStyle = '#808080';
            this.ctx.fillRect(
                0,
                offsetY + logicalCanvasHeight,
                this.canvas.width,
                this.canvas.height - (offsetY + logicalCanvasHeight)
            );
        }
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–∏–∫—Å–µ–ª–µ–π —Å viewport culling
     */
    renderPixels(pixels, scale, offsetX, offsetY) {
        const pixelSize = this.config.PIXEL_SIZE * scale;
        let renderedCount = 0;
        let culledCount = 0;
        
        for (const [coord, color] of pixels) {
            const [x, y] = coord.split(',').map(Number);
            
            // Viewport culling - –Ω–µ —Ä–∏—Å—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤–Ω–µ —ç–∫—Ä–∞–Ω–∞
            const pixelScreenX = offsetX + x * pixelSize;
            const pixelScreenY = offsetY + y * pixelSize;
            
            if (this.isPixelInViewport(pixelScreenX, pixelScreenY, pixelSize)) {
                this.ctx.fillStyle = color;
                this.ctx.fillRect(pixelScreenX, pixelScreenY, pixelSize, pixelSize);
                renderedCount++;
            } else {
                culledCount++;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç culling
        const totalPixels = renderedCount + culledCount;
        this.performanceMetrics.cullRatio = totalPixels > 0 ? culledCount / totalPixels : 0;
        
        return renderedCount;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
     */
    renderSelectedPixel(selectedPixel, scale, offsetX, offsetY) {
        const pixelSize = this.config.PIXEL_SIZE * scale;
        const x = offsetX + selectedPixel.x * pixelSize;
        const y = offsetY + selectedPixel.y * pixelSize;
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
        const time = Date.now() * 0.005;
        const alpha = 0.3 + 0.2 * Math.sin(time);
        
        this.ctx.fillStyle = `rgba(255, 255, 0, ${alpha})`;
        this.ctx.fillRect(x, y, pixelSize, pixelSize);
        
        // –†–∞–º–∫–∞
        this.ctx.strokeStyle = '#FFD700';
        this.ctx.lineWidth = Math.max(1, scale * 0.5);
        this.ctx.strokeRect(x, y, pixelSize, pixelSize);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–∏–∫—Å–µ–ª—å –≤ viewport
     */
    isPixelInViewport(x, y, size) {
        return !(x + size < 0 || y + size < 0 || 
                x > this.canvas.width || y > this.canvas.height);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ viewport
     */
    updateViewport(scale, offsetX, offsetY) {
        this.viewport = {
            x: -offsetX / scale,
            y: -offsetY / scale,
            width: this.canvas.width / scale,
            height: this.canvas.height / scale
        };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ö–æ–ª—Å—Ç–∞
     */
    updateCanvasSize() {
        const rect = this.canvas.getBoundingClientRect();
        const dpr = window.devicePixelRatio || 1;
        
        if (this.canvas.width !== rect.width * dpr || 
            this.canvas.height !== rect.height * dpr) {
            
            this.canvas.width = rect.width * dpr;
            this.canvas.height = rect.height * dpr;
            
            this.ctx.scale(dpr, dpr);
            this.canvas.style.width = rect.width + 'px';
            this.canvas.style.height = rect.height + 'px';
            
            this.needsRedraw = true;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    updatePerformanceMetrics(timestamp) {
        this.frameCount++;
        
        if (timestamp - this.lastFrameTime >= 1000) {
            this.performanceMetrics.fps = this.frameCount;
            this.frameCount = 0;
            this.lastFrameTime = timestamp;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            appState.set('performance.fps', this.performanceMetrics.fps);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    updateRenderMetrics(renderTime, pixelsRendered) {
        this.performanceMetrics.renderTime = renderTime;
        this.performanceMetrics.pixelsRendered = pixelsRendered;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        appState.batchUpdate({
            'performance.renderTime': renderTime,
            'performance.pixelsRendered': pixelsRendered,
            'performance.cullRatio': this.performanceMetrics.cullRatio
        });
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
     */
    forceRedraw() {
        this.needsRedraw = true;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupEventListeners() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ–ª—Å—Ç–∞
        appState.subscribe('canvas', () => {
            this.needsRedraw = true;
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.needsRedraw = true;
        });
    }
    
    /**
     * Throttle —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
     */
    throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getPerformanceMetrics() {
        return { ...this.performanceMetrics };
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    dispose() {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
        // (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã unsubscribe —Ñ—É–Ω–∫—Ü–∏–∏)
        this.isRendering = false;
    }
}
