/**
 * –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
 * 
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç FPS, –ø–∞–º—è—Ç—å, –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
 */

import { appState } from '../modules/StateManager.js';

export class PerformanceMonitor {
    constructor() {
        this.isRunning = false;
        this.metrics = {
            fps: 0,
            frameTime: 0,
            memoryUsed: 0,
            renderTime: 0,
            pixelsRendered: 0,
            connectionLatency: 0,
            cacheHitRatio: 0
        };
        
        // –°—á–µ—Ç—á–∏–∫–∏
        this.frameCount = 0;
        this.lastFrameTime = performance.now();
        this.lastMemoryCheck = 0;
        this.frameTimeSamples = [];
        this.maxSamples = 60; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –∫–∞–¥—Ä–æ–≤
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.fpsUpdateInterval = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
        this.memoryUpdateInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥
        this.metricsUpdateInterval = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
        
        // –¢–∞–π–º–µ—Ä—ã
        this.timers = {
            metrics: null,
            memory: null
        };
        
        this.setupStateListeners();
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    start() {
        if (this.isRunning) return;
        
        console.log('üìä Starting performance monitor');
        this.isRunning = true;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
        this.startFrameMonitoring();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
        this.startMemoryMonitoring();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫
        this.startMetricsMonitoring();
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.setupDisplayToggle();
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    stop() {
        if (!this.isRunning) return;
        
        console.log('üìä Stopping performance monitor');
        this.isRunning = false;
        
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        Object.values(this.timers).forEach(timer => {
            if (timer) clearInterval(timer);
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –¥–∏—Å–ø–ª–µ–π
        this.hideStatsDisplay();
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ FPS
     */
    startFrameMonitoring() {
        const trackFrame = (timestamp) => {
            if (!this.isRunning) return;
            
            this.frameCount++;
            const frameTime = timestamp - this.lastFrameTime;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞ –≤ –≤—ã–±–æ—Ä–∫—É
            this.frameTimeSamples.push(frameTime);
            if (this.frameTimeSamples.length > this.maxSamples) {
                this.frameTimeSamples.shift();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º FPS –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            if (timestamp - this.lastFrameTime >= this.fpsUpdateInterval) {
                this.updateFPS(timestamp);
                this.lastFrameTime = timestamp;
                this.frameCount = 0;
            }
            
            requestAnimationFrame(trackFrame);
        };
        
        requestAnimationFrame(trackFrame);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS –º–µ—Ç—Ä–∏–∫
     */
    updateFPS(timestamp) {
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π FPS
        this.metrics.fps = Math.round(this.frameCount);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞
        if (this.frameTimeSamples.length > 0) {
            const avgFrameTime = this.frameTimeSamples.reduce((a, b) => a + b, 0) / this.frameTimeSamples.length;
            this.metrics.frameTime = Math.round(avgFrameTime * 100) / 100;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        appState.batchUpdate({
            'performance.fps': this.metrics.fps,
            'performance.frameTime': this.metrics.frameTime
        });
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
     */
    startMemoryMonitoring() {
        this.timers.memory = setInterval(() => {
            this.updateMemoryMetrics();
        }, this.memoryUpdateInterval);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–∞–º—è—Ç–∏
     */
    updateMemoryMetrics() {
        if (performance.memory) {
            const memory = performance.memory;
            this.metrics.memoryUsed = Math.round(memory.usedJSHeapSize / 1024 / 1024 * 100) / 100; // MB
            
            appState.set('performance.memoryUsage', this.metrics.memoryUsed);
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫
     */
    startMetricsMonitoring() {
        this.timers.metrics = setInterval(() => {
            this.updateGeneralMetrics();
        }, this.metricsUpdateInterval);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
     */
    updateGeneralMetrics() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const renderTime = appState.get('performance.renderTime') || 0;
        const pixelsRendered = appState.get('performance.pixelsRendered') || 0;
        
        this.metrics.renderTime = Math.round(renderTime * 100) / 100;
        this.metrics.pixelsRendered = pixelsRendered;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        this.calculateDerivedMetrics();
    }
    
    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    calculateDerivedMetrics() {
        // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫—ç—à–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        const canvasState = appState.get('canvas');
        if (canvasState && canvasState.pixels) {
            const totalPixels = canvasState.pixels.size;
            const renderedPixels = this.metrics.pixelsRendered;
            
            if (totalPixels > 0) {
                this.metrics.cacheHitRatio = Math.round((renderedPixels / totalPixels) * 100);
            }
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–ø–∏–∫—Å–µ–ª–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—É)
        if (this.metrics.renderTime > 0) {
            this.metrics.renderEfficiency = Math.round(this.metrics.pixelsRendered / this.metrics.renderTime);
        } else {
            this.metrics.renderEfficiency = 0;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateListeners() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        appState.subscribe('performance', (performance) => {
            if (performance.renderTime !== undefined) {
                this.metrics.renderTime = performance.renderTime;
            }
            if (performance.pixelsRendered !== undefined) {
                this.metrics.pixelsRendered = performance.pixelsRendered;
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    setupDisplayToggle() {
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–±—Ä–∞–Ω–∞
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏—Å–ø–ª–µ—è
     */
    startStatsDisplay() {
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–±—Ä–∞–Ω–∞
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Å–ø–ª–µ—è
     */
    updateStatsDisplay() {
        // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–±—Ä–∞–Ω–∞
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è FPS
     */
    getFPSColor(fps) {
        if (fps >= 60) return '#00ff00'; // –ó–µ–ª–µ–Ω—ã–π
        if (fps >= 30) return '#ffff00'; // –ñ–µ–ª—Ç—ã–π
        if (fps >= 15) return '#ff8800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        return '#ff0000'; // –ö—Ä–∞—Å–Ω—ã–π
    }
    
    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    measureLatency() {
        if (!appState.get('connection.isConnected')) return;
        
        const startTime = performance.now();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∏ –∂–¥–µ–º pong
        // (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º)
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.metrics.connectionLatency = 50; // ms
    }
    
    /**
     * –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    recordPerformanceEvent(eventName, data = {}) {
        if (!this.isRunning) return;
        
        const event = {
            timestamp: performance.now(),
            name: eventName,
            metrics: { ...this.metrics },
            data
        };
        
        console.log('üìà Performance Event:', event);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
     */
    getAllMetrics() {
        return {
            ...this.metrics,
            timestamp: performance.now()
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getPerformanceReport() {
        const report = {
            timestamp: new Date().toISOString(),
            metrics: this.getAllMetrics(),
            system: {
                userAgent: navigator.userAgent,
                platform: navigator.platform,
                cores: navigator.hardwareConcurrency || 'unknown',
                memory: navigator.deviceMemory ? `${navigator.deviceMemory}GB` : 'unknown'
            },
            canvas: {
                size: `${appState.get('canvas.scale') || 1}x`,
                pixelsActive: appState.get('canvas.pixels')?.size || 0,
                offsetX: appState.get('canvas.offsetX') || 0,
                offsetY: appState.get('canvas.offsetY') || 0
            },
            connection: {
                connected: appState.get('connection.isConnected'),
                onlineUsers: appState.get('connection.onlineUsers'),
                reconnectAttempts: appState.get('connection.reconnectAttempts')
            }
        };
        
        return report;
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    exportData() {
        const data = this.getPerformanceReport();
        const blob = new Blob([JSON.stringify(data, null, 2)], { 
            type: 'application/json' 
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `performance-report-${Date.now()}.json`;
        a.click();
        
        URL.revokeObjectURL(url);
    }
    
    /**
     * –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
     */
    reset() {
        this.frameCount = 0;
        this.frameTimeSamples = [];
        this.metrics = {
            fps: 0,
            frameTime: 0,
            memoryUsed: 0,
            renderTime: 0,
            pixelsRendered: 0,
            connectionLatency: 0,
            cacheHitRatio: 0
        };
        
        console.log('üìä Performance metrics reset');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    checkPerformanceThresholds() {
        const { fps, memoryUsed, renderTime } = this.metrics;
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (fps < 15 && fps > 0) {
            this.triggerPerformanceWarning('low-fps', `Low FPS detected: ${fps}`);
        }
        
        if (memoryUsed > 500) { // 500MB
            this.triggerPerformanceWarning('high-memory', `High memory usage: ${memoryUsed}MB`);
        }
        
        if (renderTime > 50) { // 50ms
            this.triggerPerformanceWarning('slow-render', `Slow rendering: ${renderTime}ms`);
        }
    }
    
    /**
     * –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    triggerPerformanceWarning(type, message) {
        console.warn(`‚ö†Ô∏è Performance Warning (${type}):`, message);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        // NotificationSystem.warning(message, { duration: 3000 });
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const performanceMonitor = new PerformanceMonitor();
