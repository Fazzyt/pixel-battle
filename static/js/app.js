/**
 * –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ pixel-battle –∫–ª–∏–µ–Ω—Ç–∞
 * 
 * –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
 */

import { appState } from './modules/StateManager.js';
import { RenderEngine } from './modules/RenderEngine.js';
import { createWebSocketManager } from './modules/WebSocketManager.js';
import { InputController } from './modules/InputController.js';
import { NotificationSystem } from './components/NotificationSystem.js';
import { performanceMonitor } from './utils/PerformanceMonitor.js';

class PixelBattleApp {
    constructor(config) {
        this.config = config;
        this.isInitialized = false;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.canvas = null;
        this.renderEngine = null;
        this.webSocketManager = null;
        this.inputController = null;
        this.notificationSystem = null;
        
        // UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.ui = {
            colorPalette: null,
            confirmButton: null,
            cooldownDisplay: null,
            cooldownProgressBar: null,
            coordinatesDisplay: null,
            onlineCounter: null
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.appState = {
            isConnected: false,
            isReady: false,
            lastError: null
        };
        
        console.log('üé® Pixel Battle App created with config:', config);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async initialize() {
        try {
            console.log('üöÄ Initializing Pixel Battle App...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–≤–∞—Å–∞
            appState.initializeCanvasState();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
            await this.initializeDOM();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await this.initializeComponents();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
            await this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
            this.initializeUI();
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            await this.connectToServer();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            this.startPerformanceMonitoring();
            
            // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            this.appState.isReady = true;
            appState.set('ui.isLoading', false);
            
            console.log('‚úÖ Pixel Battle App initialized successfully');
        
        } catch (error) {
            console.error('‚ùå Failed to initialize app:', error);
            appState.set('ui.isLoading', false);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try {
                NotificationSystem.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
            } catch (notifError) {
                console.error('‚ùå Failed to show error notification:', notifError);
            }
            
            throw error;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    async initializeDOM() {
        console.log('üîß Initializing DOM elements...');
        
        // –ü–æ–ª—É—á–∞–µ–º canvas –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.canvas = document.getElementById('canvas');
        this.canvasContainer = document.getElementById('canvas-container');
        
        if (!this.canvas) {
            throw new Error('Canvas element not found');
        }
        
        if (!this.canvasContainer) {
            throw new Error('Canvas container element not found');
        }
        
        console.log('üîç DOM elements found:', {
            canvas: !!this.canvas,
            canvasContainer: !!this.canvasContainer
        });
        
        // –ü–æ–ª—É—á–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        this.ui = {
            colorPalette: document.querySelectorAll('.color-option') || [],
            confirmButton: document.getElementById('confirm-pixel'),
            cooldownDisplay: document.getElementById('cooldown'),
            cooldownProgressBar: document.getElementById('cooldown-progress-bar'),
            coordinatesDisplay: document.querySelector('#coordinates .info-text'),
            onlineCounter: document.querySelector('#online-counter .info-text')
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const requiredElements = ['confirmButton', 'cooldownDisplay'];
        for (const elementName of requiredElements) {
            if (!this.ui[elementName]) {
                console.warn(`‚ö†Ô∏è Required UI element not found: ${elementName}`);
            }
        }
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
        const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
        
        const availableWidth = window.innerWidth > 768 ? windowWidth - sidebarWidth : windowWidth;
        const availableHeight = windowHeight - headerHeight;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        this.canvasContainer.style.width = availableWidth + 'px';
        this.canvasContainer.style.height = availableHeight + 'px';
        
        console.log('üîß Forced container dimensions:', { width: availableWidth, height: availableHeight });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        this.initializeCanvasSize();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            this.initializeCanvasSize();
            console.log('üîÑ Canvas size reinitialized after delay');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (this.inputController) {
                this.inputController.centerCanvas();
                console.log('üéØ Canvas centered after initialization');
            }
        }, 200);
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
     */
    initializeCanvasSize() {
        if (!this.canvas || !this.canvasContainer) {
            console.error('‚ùå Canvas or container not available for size initialization');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –¥–ª—è fallback
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞
        const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
        const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–∞–Ω–≤–∞—Å–∞
        let availableWidth = windowWidth;
        let availableHeight = windowHeight - headerHeight;
        
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
        if (window.innerWidth > 768) {
            availableWidth = windowWidth - sidebarWidth;
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        this.canvasContainer.style.width = availableWidth + 'px';
        this.canvasContainer.style.height = availableHeight + 'px';
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∏–ª–µ–π
        const containerRect = this.canvasContainer.getBoundingClientRect();
        const dpr = window.devicePixelRatio || 1;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞
        const canvasWidth = availableWidth;
        const canvasHeight = availableHeight;
        
        console.log('üìê Canvas size debug:', {
            windowSize: { width: windowWidth, height: windowHeight },
            availableArea: { width: availableWidth, height: availableHeight },
            headerHeight: headerHeight,
            sidebarWidth: sidebarWidth,
            dpr: dpr,
            config: {
                CANVAS_WIDTH: this.config.CANVAS_WIDTH,
                CANVAS_HEIGHT: this.config.CANVAS_HEIGHT,
                PIXEL_SIZE: this.config.PIXEL_SIZE,
                calculatedSize: {
                    width: this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE,
                    height: this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE
                }
            },
            finalSize: { width: canvasWidth, height: canvasHeight }
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞
        this.canvas.width = canvasWidth * dpr;
        this.canvas.height = canvasHeight * dpr;
        
        const ctx = this.canvas.getContext('2d');
        ctx.scale(dpr, dpr);
        
        this.canvas.style.width = canvasWidth + 'px';
        this.canvas.style.height = canvasHeight + 'px';
        
        console.log('üñºÔ∏è Canvas initialized:', { 
            width: canvasWidth, 
            height: canvasHeight, 
            dpr,
            canvasElement: this.canvas,
            containerElement: this.canvasContainer,
            canvasVisible: this.canvas.offsetHeight > 0 && this.canvas.offsetWidth > 0,
            containerVisible: this.canvasContainer.offsetHeight > 0 && this.canvasContainer.offsetWidth > 0,
            logicalCanvasSize: {
                width: this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE,
                height: this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE
            }
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        if (this.renderEngine) {
            this.renderEngine.forceRedraw();
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async initializeComponents() {
        console.log('üîß Initializing components...');
        
        // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        this.notificationSystem = new NotificationSystem();
        
        // –î–≤–∏–∂–æ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        this.renderEngine = new RenderEngine(this.canvas, this.config);
        
        // WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
        const wsUrl = `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws`;
        this.webSocketManager = createWebSocketManager(wsUrl);
        
        // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–≤–æ–¥–∞
        this.inputController = new InputController(this.canvas, this.config);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        setTimeout(() => {
            this.inputController.centerCanvas();
            console.log('üéØ Canvas centered after components initialization');
        }, 100);
        
        console.log('‚úÖ Components initialized');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    async setupEventListeners() {
        console.log('üîß Setting up event listeners...');
        
        // –°–æ–±—ã—Ç–∏—è WebSocket
        this.setupWebSocketEvents();
        
        // –°–æ–±—ã—Ç–∏—è UI
        this.setupUIEvents();
        
        // –°–æ–±—ã—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.setupStateEvents();
        
        // –°–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞
        this.setupWindowEvents();
        
        console.log('‚úÖ Event listeners set up');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π WebSocket
     */
    setupWebSocketEvents() {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        this.webSocketManager.on('connected', () => {
            console.log('üîå Connected to server');
            this.appState.isConnected = true;
            appState.set('connection.isConnected', true);
            NotificationSystem.success('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É', { duration: 2000 });
        });
        
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
        this.webSocketManager.on('disconnected', (event) => {
            console.log('üîå Disconnected from server');
            this.appState.isConnected = false;
            appState.set('connection.isConnected', false);
            
            if (event.code !== 1000) { // –ù–µ —Ä—É—á–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                NotificationSystem.warning('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', { 
                    duration: 5000 
                });
            }
        });
        
        // –û—à–∏–±–∫–∏
        this.webSocketManager.on('error', (error) => {
            console.error('üîå WebSocket error:', error);
            NotificationSystem.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.webSocketManager.on('message:init', (message) => {
            console.log('üöÄ Received initialization data');
            this.handleInitialization(message);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
        this.webSocketManager.on('message:pixel_update', (message) => {
            this.handlePixelUpdate(message);
        });
        
        // –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        this.webSocketManager.on('message:error', (message) => {
            console.error('üö® Server error:', message.message);
            NotificationSystem.error(message.message);
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π UI
     */
    setupUIEvents() {
        // –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
        this.ui.colorPalette.forEach(colorOption => {
            colorOption.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö
                this.ui.colorPalette.forEach(opt => opt.classList.remove('selected'));
                
                // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
                colorOption.classList.add('selected');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const color = colorOption.dataset.color;
                appState.set('user.selectedColor', color);
                
                console.log('üé® Color selected:', color);
            });
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—è
        this.ui.confirmButton.addEventListener('click', () => {
            this.handlePixelConfirmation();
        });
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
        document.addEventListener('keydown', (event) => {
            this.handleGlobalKeyboard(event);
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateEvents() {
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è
        appState.subscribe('canvas.selectedPixel', (selectedPixel) => {
            if (selectedPixel && this.ui.coordinatesDisplay) {
                this.ui.coordinatesDisplay.textContent = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${selectedPixel.x}, ${selectedPixel.y}`;
            }
        });
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è cooldown
        appState.subscribe('user.cooldownTime', (cooldownTime) => {
            this.updateCooldownDisplay(cooldownTime);
        });
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
        appState.subscribe('connection.onlineUsers', (onlineUsers) => {
            if (this.ui.onlineCounter) {
                this.ui.onlineCounter.textContent = `Online: ${onlineUsers}`;
            }
        });
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        appState.subscribe('connection.isConnected', (isConnected) => {
            this.updateConnectionStatus(isConnected);
        });
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        appState.subscribe('ui.cursorPosition', (position) => {
            if (position && this.ui.coordinatesDisplay) {
                this.ui.coordinatesDisplay.textContent = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${position.x}, ${position.y}`;
            } else if (this.ui.coordinatesDisplay) {
                this.ui.coordinatesDisplay.textContent = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:';
            }
        });
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ–∫–Ω–∞
     */
    setupWindowEvents() {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.handleWindowResize();
        });
        
        // –ü–æ—Ç–µ—Ä—è —Ñ–æ–∫—É—Å–∞
        window.addEventListener('blur', () => {
            console.log('üîç Window lost focus');
            // –ú–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
        window.addEventListener('focus', () => {
            console.log('üîç Window gained focus');
            // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        });
        
        // –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.cleanup();
        });
    }
    
    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
     */
    async connectToServer() {
        console.log('üîå Connecting to server...');
        await this.webSocketManager.connect();
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    startPerformanceMonitoring() {
        console.log('üìä Starting performance monitoring...');
        performanceMonitor.start();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    initializeUI() {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (this.ui.colorPalette && this.ui.colorPalette.length > 0) {
            const firstColor = this.ui.colorPalette[0];
            if (firstColor && firstColor.dataset && firstColor.dataset.color) {
            firstColor.classList.add('selected');
            appState.set('user.selectedColor', firstColor.dataset.color);
                console.log('üé® First color selected:', firstColor.dataset.color);
            }
        } else {
            console.warn('‚ö†Ô∏è Color palette not found or empty');
        }
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ö–æ–ª—Å—Ç
        this.centerCanvas();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        setTimeout(() => {
            this.centerCanvas();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const canvasRect = this.canvas.getBoundingClientRect();
            const containerRect = this.canvasContainer.getBoundingClientRect();
            const currentState = appState.get('canvas');
            
            console.log('üîç Debug positioning after centering:', {
                canvasRect: { 
                    width: canvasRect.width, 
                    height: canvasRect.height,
                    left: canvasRect.left,
                    top: canvasRect.top
                },
                containerRect: { 
                    width: containerRect.width, 
                    height: containerRect.height,
                    left: containerRect.left,
                    top: containerRect.top
                },
                canvasState: {
                    offsetX: currentState.offsetX,
                    offsetY: currentState.offsetY,
                    scale: currentState.scale
                },
                config: {
                    CANVAS_WIDTH: this.config.CANVAS_WIDTH,
                    CANVAS_HEIGHT: this.config.CANVAS_HEIGHT,
                    PIXEL_SIZE: this.config.PIXEL_SIZE,
                    calculatedSize: {
                        width: this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE,
                        height: this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE
                    }
                }
            });
        }, 100);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 500–º—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        setTimeout(() => {
            this.centerCanvas();
            console.log('üéØ Final canvas centering completed');
        }, 500);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        const centerButton = document.getElementById('center-canvas');
        if (centerButton) {
            centerButton.addEventListener('click', () => {
                console.log('üéØ Center button clicked');
                this.centerCanvas();
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–∞–π–¥–±–∞—Ä–∞
        const sidebarButton = document.getElementById('toggle-sidebar');
        if (sidebarButton) {
            sidebarButton.addEventListener('click', () => {
                console.log('üìã Sidebar toggle button clicked');
                this.toggleSidebar();
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
        const centerSidebarButton = document.getElementById('center-canvas-sidebar');
        if (centerSidebarButton) {
            centerSidebarButton.addEventListener('click', () => {
                console.log('üéØ Sidebar center button clicked');
                this.centerCanvas();
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–∞–π–¥–±–∞—Ä–∞
        const mobileToggle = document.getElementById('mobile-toggle');
        if (mobileToggle) {
            mobileToggle.addEventListener('click', () => {
                console.log('üì± Mobile toggle clicked');
                this.toggleMobileSidebar();
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
        document.addEventListener('click', (event) => {
            const mobilePanel = document.getElementById('mobile-panel');
            const mobileToggle = document.getElementById('mobile-toggle');
            
            if (mobilePanel && mobilePanel.style.display !== 'none' && 
                !mobilePanel.contains(event.target) && 
                !mobileToggle.contains(event.target)) {
                mobilePanel.style.display = 'none';
                console.log('üì± Mobile panel closed by outside click');
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        const sidePanel = document.querySelector('.side-panel');
        if (sidePanel) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å
            sidePanel.style.display = 'flex';
            sidePanel.style.visibility = 'visible';
            sidePanel.style.opacity = '1';
            sidePanel.style.width = '300px';
            
            console.log('üîç Side panel found and forced visible:', {
                element: sidePanel,
                computedStyle: window.getComputedStyle(sidePanel),
                display: window.getComputedStyle(sidePanel).display,
                visibility: window.getComputedStyle(sidePanel).visibility,
                width: window.getComputedStyle(sidePanel).width,
                offsetWidth: sidePanel.offsetWidth,
                offsetHeight: sidePanel.offsetHeight
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            const colorPalette = sidePanel.querySelector('.color-palette');
            const colorOptions = sidePanel.querySelectorAll('.color-option');
            console.log('üé® Color palette elements:', {
                palette: !!colorPalette,
                optionsCount: colorOptions.length,
                options: Array.from(colorOptions).map(opt => ({
                    color: opt.dataset.color,
                    visible: opt.offsetWidth > 0 && opt.offsetHeight > 0
                }))
            });
        } else {
            console.error('‚ùå Side panel not found!');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º side-panel
            const allSidePanels = document.querySelectorAll('[class*="side"]');
            console.log('üîç All side-related elements:', Array.from(allSidePanels).map(el => ({
                className: el.className,
                tagName: el.tagName,
                visible: el.offsetWidth > 0 && el.offsetHeight > 0
            })));
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (this.ui.cooldownDisplay && this.ui.cooldownProgressBar) {
        this.updateCooldownDisplay(0);
        } else {
            console.warn('‚ö†Ô∏è Cooldown elements not found, skipping cooldown display initialization');
        }
        
        console.log('‚úÖ UI initialized');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     */
    handleInitialization(message) {
        console.log('üöÄ Handling initialization with', message.pixels.length, 'pixels');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Map –ø–∏–∫—Å–µ–ª–µ–π
        const pixels = new Map();
        message.pixels.forEach(pixel => {
            const key = `${pixel.x},${pixel.y}`;
            pixels.set(key, pixel.color);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        appState.batchUpdate({
            'canvas.pixels': pixels,
            'connection.onlineUsers': message.online_users
        });
        
        NotificationSystem.info(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${message.pixels.length} –ø–∏–∫—Å–µ–ª–µ–π`);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∏–∫—Å–µ–ª–µ–π
     */
    handlePixelUpdate(message) {
        const pixels = appState.get('canvas.pixels');
        const key = `${message.x},${message.y}`;
        
        const newPixels = new Map(pixels);
        newPixels.set(key, message.color);
        
        appState.set('canvas.pixels', newPixels);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—è
     */
    handlePixelConfirmation() {
        const selectedPixel = appState.get('canvas.selectedPixel');
        const selectedColor = appState.get('user.selectedColor');
        const isCooldown = appState.get('user.isCooldown');
        
        if (!selectedPixel) {
            NotificationSystem.warning('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è');
            return;
        }
        
        if (isCooldown) {
            const remainingTime = appState.get('user.cooldownTime');
            NotificationSystem.warning(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${remainingTime} —Å–µ–∫—É–Ω–¥`);
            return;
        }
        
        if (!this.appState.isConnected) {
            NotificationSystem.error('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            return;
        }
        
        console.log('‚úÖ Confirming pixel placement:', selectedPixel, selectedColor);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.webSocketManager.emit('sendPixelUpdate', {
            x: selectedPixel.x,
            y: selectedPixel.y,
            color: selectedColor
        });
        
        // –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        this.handlePixelUpdate({
            x: selectedPixel.x,
            y: selectedPixel.y,
            color: selectedColor
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º cooldown
        this.startCooldown();
        
        // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        appState.set('canvas.selectedPixel', null);
        
        NotificationSystem.success('–ü–∏–∫—Å–µ–ª—å —Ä–∞–∑–º–µ—â–µ–Ω!', { duration: 2000 });
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ cooldown
     */
    startCooldown() {
        const cooldownTime = this.config.COOLDOWN_TIME;
        
        appState.batchUpdate({
            'user.isCooldown': true,
            'user.cooldownTime': cooldownTime
        });
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        this.ui.confirmButton.disabled = true;
        this.ui.confirmButton.style.backgroundColor = '#2c3e50';
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        const interval = setInterval(() => {
            const currentTime = appState.get('user.cooldownTime') - 1;
            appState.set('user.cooldownTime', currentTime);
            
            if (currentTime <= 0) {
                clearInterval(interval);
                this.endCooldown();
            }
        }, 1000);
        
        console.log('‚è∞ Cooldown started for', cooldownTime, 'seconds');
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ cooldown
     */
    endCooldown() {
        appState.batchUpdate({
            'user.isCooldown': false,
            'user.cooldownTime': 0
        });
        
        // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        this.ui.confirmButton.disabled = false;
        this.ui.confirmButton.style.backgroundColor = '#2ecc71';
        
        console.log('‚úÖ Cooldown ended');
        NotificationSystem.info('–ú–æ–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–∏–∫—Å–µ–ª—å', { duration: 2000 });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è cooldown
     */
    updateCooldownDisplay(cooldownTime) {
        if (this.ui.cooldownDisplay) {
            if (cooldownTime > 0) {
                this.ui.cooldownDisplay.textContent = `–°–ª–µ–¥—É—é—â–∏–π –ø–∏–∫—Å–µ–ª—å —á–µ—Ä–µ–∑: ${cooldownTime} —Å–µ–∫—É–Ω–¥.`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (this.ui.cooldownProgressBar) {
                    this.ui.cooldownProgressBar.style.width = '100%';
                    
                    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    const progress = 100 - (cooldownTime / this.config.COOLDOWN_TIME) * 100;
                    this.ui.cooldownProgressBar.style.width = `${progress}%`;
                }
            } else {
                this.ui.cooldownDisplay.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –ø–∏–∫—Å–µ–ª—è!';
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (this.ui.cooldownProgressBar) {
                    this.ui.cooldownProgressBar.style.width = '0%';
                }
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ UI
     */
    updateConnectionStatus(isConnected) {
        const statusIndicator = document.querySelector('.status-indicator');
        const statusText = document.querySelector('#connection-status .info-text');
        
        if (statusIndicator && statusText) {
            if (isConnected) {
                statusIndicator.textContent = 'üü¢';
                statusIndicator.dataset.status = 'connected';
                statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            } else {
                statusIndicator.textContent = 'üî¥';
                statusIndicator.dataset.status = 'disconnected';
                statusText.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
            }
        }
    }
    
    /**
     * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
     */
    centerCanvas() {
        const rect = this.canvas.getBoundingClientRect();
        const scale = appState.get('canvas.scale') || 1;
        
        // –†–∞–∑–º–µ—Ä—ã –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–∞–Ω–≤–∞—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—Å —É—á–µ—Ç–æ–º PIXEL_SIZE)
        const logicalCanvasWidth = this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE;
        const logicalCanvasHeight = this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —à–∏—Ä–∏–Ω—É —Å–∞–π–¥–±–∞—Ä–∞
        const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
        const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
        const containerRect = this.canvasContainer.getBoundingClientRect();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Å–∞–π–¥–±–∞—Ä —Å–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å = –≤—Å—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        let availableWidth = windowWidth;
        let availableHeight = windowHeight - headerHeight;
        
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
        if (window.innerWidth > 768) {
            availableWidth = windowWidth - sidebarWidth;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        const finalWidth = containerRect.width > 0 ? containerRect.width : availableWidth;
        const finalHeight = containerRect.height > 0 ? containerRect.height : availableHeight;
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        let centerX = (finalWidth - logicalCanvasWidth * scale) / 2;
        let centerY = (finalHeight - logicalCanvasHeight * scale) / 2;
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞–Ω–≤–∞—Å –Ω–µ —É—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        if (logicalCanvasWidth * scale > finalWidth) {
            centerX = 0;
        } else {
            centerX = Math.max(0, Math.min(centerX, finalWidth - logicalCanvasWidth * scale));
        }
        
        if (logicalCanvasHeight * scale > finalHeight) {
            centerY = headerHeight;
        } else {
            centerY = Math.max(headerHeight, Math.min(centerY, finalHeight - logicalCanvasHeight * scale));
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
        if (centerX < 0) centerX = 0;
        if (centerY < headerHeight) centerY = headerHeight;
        
        console.log('üéØ Centering canvas:', {
            canvasRect: { width: rect.width, height: rect.height },
            containerRect: { width: containerRect.width, height: containerRect.height },
            windowSize: { width: windowWidth, height: windowHeight },
            availableArea: { width: availableWidth, height: availableHeight },
            finalArea: { width: finalWidth, height: finalHeight },
            logicalCanvas: { width: logicalCanvasWidth, height: logicalCanvasHeight },
            scale: scale,
            headerHeight: headerHeight,
            sidebarWidth: sidebarWidth,
            isMobile: window.innerWidth <= 768,
            center: { x: centerX, y: centerY },
            config: {
                CANVAS_WIDTH: this.config.CANVAS_WIDTH,
                CANVAS_HEIGHT: this.config.CANVAS_HEIGHT,
                PIXEL_SIZE: this.config.PIXEL_SIZE,
                calculatedSize: {
                    width: this.config.CANVAS_WIDTH * this.config.PIXEL_SIZE,
                    height: this.config.CANVAS_HEIGHT * this.config.PIXEL_SIZE
                }
            }
        });
        
        appState.batchUpdate({
            'canvas.offsetX': centerX,
            'canvas.offsetY': centerY
        });
        
        console.log('üìê Canvas centered at:', { x: centerX, y: centerY });
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–∞–π–¥–±–∞—Ä–∞
     */
    toggleSidebar() {
        const sidePanel = document.querySelector('.side-panel');
        const canvasContainer = document.querySelector('.canvas-container');
        const topBar = document.querySelector('.top-bar');
        
        if (sidePanel) {
            const isHidden = sidePanel.classList.contains('hidden');
            
            if (isHidden) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
                sidePanel.classList.remove('hidden');
                if (canvasContainer) canvasContainer.style.marginRight = '300px';
                if (topBar) topBar.style.right = '300px';
                console.log('üìã Sidebar shown');
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
                sidePanel.classList.add('hidden');
                if (canvasContainer) canvasContainer.style.marginRight = '0';
                if (topBar) topBar.style.right = '0';
                console.log('üìã Sidebar hidden');
            }
            
            // –ü–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
            setTimeout(() => {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                const windowWidth = window.innerWidth;
                const windowHeight = window.innerHeight;
                const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
                const sidebarWidth = isHidden ? 300 : 0;
                
                const availableWidth = window.innerWidth > 768 ? windowWidth - sidebarWidth : windowWidth;
                const availableHeight = windowHeight - headerHeight;
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                this.canvasContainer.style.width = availableWidth + 'px';
                this.canvasContainer.style.height = availableHeight + 'px';
                
                this.initializeCanvasSize();
                this.centerCanvas();
                console.log('üéØ Canvas recentered after sidebar toggle');
            }, 100);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 300–º—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            setTimeout(() => {
                this.centerCanvas();
                console.log('üéØ Final centering after sidebar toggle');
            }, 300);
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–∞–π–¥–±–∞—Ä–∞
     */
    toggleMobileSidebar() {
        const mobilePanel = document.getElementById('mobile-panel');
        const sidePanel = document.querySelector('.side-panel');
        
        if (mobilePanel) {
            const isVisible = mobilePanel.style.display !== 'none';
            
            if (isVisible) {
                // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
                mobilePanel.style.display = 'none';
                console.log('üì± Mobile panel hidden');
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
                mobilePanel.style.display = 'block';
                console.log('üì± Mobile panel shown');
            }
        }
        
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π–¥–±–∞—Ä
        if (window.innerWidth <= 768 && sidePanel) {
            const isHidden = sidePanel.classList.contains('hidden');
            
            if (isHidden) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
                sidePanel.classList.remove('hidden');
                sidePanel.style.display = 'flex';
                sidePanel.style.visibility = 'visible';
                sidePanel.style.opacity = '1';
                sidePanel.style.width = '300px';
                sidePanel.style.transform = 'translateX(0)';
                
                if (this.canvasContainer) this.canvasContainer.style.marginRight = '300px';
                if (this.topBar) this.topBar.style.right = '300px';
                console.log('üìã Mobile: Sidebar shown');
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä
                sidePanel.classList.add('hidden');
                sidePanel.style.display = 'none';
                sidePanel.style.transform = 'translateX(100%)';
                
                if (this.canvasContainer) this.canvasContainer.style.marginRight = '0';
                if (this.topBar) this.topBar.style.right = '0';
                console.log('üìã Mobile: Sidebar hidden');
            }
            
            // –ü–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
            setTimeout(() => {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                const windowWidth = window.innerWidth;
                const windowHeight = window.innerHeight;
                const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
                const sidebarWidth = isHidden ? 300 : 0;
                
                const availableWidth = windowWidth - sidebarWidth;
                const availableHeight = windowHeight - headerHeight;
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                this.canvasContainer.style.width = availableWidth + 'px';
                this.canvasContainer.style.height = availableHeight + 'px';
                
                this.initializeCanvasSize();
                this.centerCanvas();
                console.log('üéØ Canvas recentered after mobile sidebar toggle');
            }, 100);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 300–º—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            setTimeout(() => {
                this.centerCanvas();
                console.log('üéØ Final centering after mobile sidebar toggle');
            }, 300);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleWindowResize() {
        console.log('üìê Window resized');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        setTimeout(() => {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;
            const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 60;
            const sidebarWidth = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--sidebar-width')) || 300;
            
            const availableWidth = window.innerWidth > 768 ? windowWidth - sidebarWidth : windowWidth;
            const availableHeight = windowHeight - headerHeight;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            this.canvasContainer.style.width = availableWidth + 'px';
            this.canvasContainer.style.height = availableHeight + 'px';
            
            this.initializeCanvasSize();
            console.log('üîÑ Canvas size updated after window resize');
        }, 50);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–≤–∞—Å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
        setTimeout(() => {
            this.centerCanvas();
            console.log('üéØ Canvas recentered after window resize');
        }, 100);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 300–º—Å –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        setTimeout(() => {
            this.centerCanvas();
            console.log('üéØ Final centering after window resize');
        }, 300);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–ª–∞–≤–∏—à
     */
    handleGlobalKeyboard(event) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        if (event.code === 'Enter' && !event.ctrlKey && !event.altKey && !event.metaKey) {
            event.preventDefault();
            this.handlePixelConfirmation();
        }
        
        // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if (event.code === 'KeyE' && event.ctrlKey && event.shiftKey) {
            event.preventDefault();
            performanceMonitor.exportData();
            NotificationSystem.info('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    getAppStats() {
        return {
            isInitialized: this.isInitialized,
            isReady: this.appState.isReady,
            isConnected: this.appState.isConnected,
            performance: performanceMonitor.getAllMetrics(),
            canvas: {
                pixelsCount: appState.get('canvas.pixels')?.size || 0,
                scale: appState.get('canvas.scale'),
                selectedPixel: appState.get('canvas.selectedPixel')
            },
            user: {
                selectedColor: appState.get('user.selectedColor'),
                isCooldown: appState.get('user.isCooldown'),
                cooldownTime: appState.get('user.cooldownTime')
            },
            connection: {
                onlineUsers: appState.get('connection.onlineUsers'),
                reconnectAttempts: appState.get('connection.reconnectAttempts')
            }
        };
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ Cleaning up app resources...');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket
        if (this.webSocketManager) {
            this.webSocketManager.disconnect();
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performanceMonitor.stop();
        
        // –û—á–∏—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (this.inputController) {
            this.inputController.dispose();
        }
        
        if (this.renderEngine) {
            this.renderEngine.dispose();
        }
        
        console.log('‚úÖ Cleanup completed');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π CONFIG
        if (typeof CONFIG === 'undefined') {
            throw new Error('CONFIG not found. Make sure config is loaded.');
        }
        
        console.log('üöÄ Starting Pixel Battle App...');
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        window.pixelBattleApp = new PixelBattleApp(CONFIG);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await window.pixelBattleApp.initialize();
        
        console.log('üéâ Pixel Battle App ready!');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            window.appState = appState;
            window.performanceMonitor = performanceMonitor;
            console.log('üîß Debug objects added to window: appState, performanceMonitor');
        }
        
    } catch (error) {
        console.error('üí• Failed to start Pixel Battle App:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
        const errorMessage = document.createElement('div');
        errorMessage.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #ff4444;
            color: white;
            padding: 20px;
            border-radius: 8px;
            font-family: system-ui;
            z-index: 10000;
            text-align: center;
            max-width: 400px;
        `;
        errorMessage.innerHTML = `
            <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h3>
            <p>${error.message}</p>
            <button onclick="window.location.reload()" 
                    style="margin-top: 10px; padding: 8px 16px; background: white; color: #ff4444; border: none; border-radius: 4px; cursor: pointer;">
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            </button>
        `;
        document.body.appendChild(errorMessage);
        } catch (uiError) {
            console.error('‚ùå Failed to show error UI:', uiError);
        }
    }
});

export { PixelBattleApp };
